
RTOSTest-NucleoF103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bfc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd0  08003dd0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003dd0  08003dd0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003dd0  08003dd0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd4  08003dd4  00013dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000105c  20000014  08003dec  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001070  08003dec  00021070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010628  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aa8  00000000  00000000  00030665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00033110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00034230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187a0  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011378  00000000  00000000  0004d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091cdd  00000000  00000000  0005ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0a3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004714  00000000  00000000  000f0a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cf4 	.word	0x08003cf4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08003cf4 	.word	0x08003cf4

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000030 	.word	0x20000030
 800017c:	20000084 	.word	0x20000084

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	queue = xQueueCreate(5,sizeof(char));
 8000186:	2200      	movs	r2, #0
 8000188:	2101      	movs	r1, #1
 800018a:	2005      	movs	r0, #5
 800018c:	f001 ffd0 	bl	8002130 <xQueueGenericCreate>
 8000190:	4603      	mov	r3, r0
 8000192:	4a22      	ldr	r2, [pc, #136]	; (800021c <main+0x9c>)
 8000194:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 faff 	bl	8000798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f84d 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f8b7 	bl	8000310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f88b 	bl	80002bc <MX_USART2_UART_Init>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001a6:	4b1e      	ldr	r3, [pc, #120]	; (8000220 <main+0xa0>)
 80001a8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001ac:	461d      	mov	r5, r3
 80001ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f001 fe3d 	bl	8001e40 <osThreadCreate>
 80001c6:	4603      	mov	r3, r0
 80001c8:	4a16      	ldr	r2, [pc, #88]	; (8000224 <main+0xa4>)
 80001ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityIdle, 0, 128);
 80001cc:	4b16      	ldr	r3, [pc, #88]	; (8000228 <main+0xa8>)
 80001ce:	f107 0420 	add.w	r4, r7, #32
 80001d2:	461d      	mov	r5, r3
 80001d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80001e0:	f107 0320 	add.w	r3, r7, #32
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fe2a 	bl	8001e40 <osThreadCreate>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <main+0xac>)
 80001f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <main+0xb0>)
 80001f4:	1d3c      	adds	r4, r7, #4
 80001f6:	461d      	mov	r5, r3
 80001f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000200:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f001 fe19 	bl	8001e40 <osThreadCreate>
 800020e:	4603      	mov	r3, r0
 8000210:	4a08      	ldr	r2, [pc, #32]	; (8000234 <main+0xb4>)
 8000212:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000214:	f001 fe0d 	bl	8001e32 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0x98>
 800021a:	bf00      	nop
 800021c:	200002d4 	.word	0x200002d4
 8000220:	08003d30 	.word	0x08003d30
 8000224:	200002c8 	.word	0x200002c8
 8000228:	08003d4c 	.word	0x08003d4c
 800022c:	200002cc 	.word	0x200002cc
 8000230:	08003d68 	.word	0x08003d68
 8000234:	200002d0 	.word	0x200002d0

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fd4c 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000266:	2302      	movs	r3, #2
 8000268:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800026a:	2300      	movs	r3, #0
 800026c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800026e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000272:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000274:	f107 0318 	add.w	r3, r7, #24
 8000278:	4618      	mov	r0, r3
 800027a:	f000 fd77 	bl	8000d6c <HAL_RCC_OscConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000284:	f000 f946 	bl	8000514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000288:	230f      	movs	r3, #15
 800028a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028c:	2302      	movs	r3, #2
 800028e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000290:	2300      	movs	r3, #0
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	2102      	movs	r1, #2
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 ffe4 	bl	8001270 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002ae:	f000 f931 	bl	8000514 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3740      	adds	r7, #64	; 0x40
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002c2:	4a12      	ldr	r2, [pc, #72]	; (800030c <MX_USART2_UART_Init+0x50>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f001 fbce 	bl	8001a94 <HAL_UART_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002fe:	f000 f909 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20000284 	.word	0x20000284
 800030c:	40004400 	.word	0x40004400

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a2c      	ldr	r2, [pc, #176]	; (80003dc <MX_GPIO_Init+0xcc>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b2a      	ldr	r3, [pc, #168]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <MX_GPIO_Init+0xcc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a26      	ldr	r2, [pc, #152]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b24      	ldr	r3, [pc, #144]	; (80003dc <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a20      	ldr	r2, [pc, #128]	; (80003dc <MX_GPIO_Init+0xcc>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_GPIO_Init+0xcc>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <MX_GPIO_Init+0xcc>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_GPIO_Init+0xcc>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2120      	movs	r1, #32
 8000388:	4815      	ldr	r0, [pc, #84]	; (80003e0 <MX_GPIO_Init+0xd0>)
 800038a:	f000 fc9b 	bl	8000cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800038e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <MX_GPIO_Init+0xd4>)
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000398:	2300      	movs	r3, #0
 800039a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4811      	ldr	r0, [pc, #68]	; (80003e8 <MX_GPIO_Init+0xd8>)
 80003a4:	f000 fb0a 	bl	80009bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a8:	2320      	movs	r3, #32
 80003aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ac:	2301      	movs	r3, #1
 80003ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b0:	2300      	movs	r3, #0
 80003b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b4:	2302      	movs	r3, #2
 80003b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	4808      	ldr	r0, [pc, #32]	; (80003e0 <MX_GPIO_Init+0xd0>)
 80003c0:	f000 fafc 	bl	80009bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2105      	movs	r1, #5
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f000 facc 	bl	8000966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003ce:	2028      	movs	r0, #40	; 0x28
 80003d0:	f000 fae5 	bl	800099e <HAL_NVIC_EnableIRQ>

}
 80003d4:	bf00      	nop
 80003d6:	3720      	adds	r7, #32
 80003d8:	46bd      	mov	sp, r7
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40021000 	.word	0x40021000
 80003e0:	40010800 	.word	0x40010800
 80003e4:	10110000 	.word	0x10110000
 80003e8:	40011000 	.word	0x40011000

080003ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80003f4:	2120      	movs	r1, #32
 80003f6:	480b      	ldr	r0, [pc, #44]	; (8000424 <StartDefaultTask+0x38>)
 80003f8:	f000 fc7c 	bl	8000cf4 <HAL_GPIO_TogglePin>
	  uint8_t data[] = "Task1\n\r";
 80003fc:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <StartDefaultTask+0x3c>)
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000406:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 800040a:	f107 0108 	add.w	r1, r7, #8
 800040e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000412:	2208      	movs	r2, #8
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <StartDefaultTask+0x40>)
 8000416:	f001 fb8a 	bl	8001b2e <HAL_UART_Transmit>
	  osDelay(3000);
 800041a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800041e:	f001 fd5b 	bl	8001ed8 <osDelay>
  {
 8000422:	e7e7      	b.n	80003f4 <StartDefaultTask+0x8>
 8000424:	40010800 	.word	0x40010800
 8000428:	08003d84 	.word	0x08003d84
 800042c:	20000284 	.word	0x20000284

08000430 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	char c;
  /* Infinite loop */
  for(;;)
  {
	  //Checks for data in queue and prints it to the console.
	  if(xQueueReceive(queue, (void*)&c, 0) == pdTRUE){
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <StartTask02+0x60>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f107 0117 	add.w	r1, r7, #23
 8000440:	2200      	movs	r2, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f001 ffd0 	bl	80023e8 <xQueueReceive>
 8000448:	4603      	mov	r3, r0
 800044a:	2b01      	cmp	r3, #1
 800044c:	d109      	bne.n	8000462 <StartTask02+0x32>
		  uint8_t data[] = {c};
 800044e:	7dfb      	ldrb	r3, [r7, #23]
 8000450:	723b      	strb	r3, [r7, #8]
		  HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8000452:	f107 0108 	add.w	r1, r7, #8
 8000456:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800045a:	2201      	movs	r2, #1
 800045c:	480d      	ldr	r0, [pc, #52]	; (8000494 <StartTask02+0x64>)
 800045e:	f001 fb66 	bl	8001b2e <HAL_UART_Transmit>
	  }
	  ;uint8_t data[] = "TaskIdle\n\r";
 8000462:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <StartTask02+0x68>)
 8000464:	f107 030c 	add.w	r3, r7, #12
 8000468:	ca07      	ldmia	r2, {r0, r1, r2}
 800046a:	c303      	stmia	r3!, {r0, r1}
 800046c:	801a      	strh	r2, [r3, #0]
 800046e:	3302      	adds	r3, #2
 8000470:	0c12      	lsrs	r2, r2, #16
 8000472:	701a      	strb	r2, [r3, #0]
	  ;HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 8000474:	f107 010c 	add.w	r1, r7, #12
 8000478:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800047c:	220b      	movs	r2, #11
 800047e:	4805      	ldr	r0, [pc, #20]	; (8000494 <StartTask02+0x64>)
 8000480:	f001 fb55 	bl	8001b2e <HAL_UART_Transmit>
	  osDelay(1000);
 8000484:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000488:	f001 fd26 	bl	8001ed8 <osDelay>
  {
 800048c:	e7d4      	b.n	8000438 <StartTask02+0x8>
 800048e:	bf00      	nop
 8000490:	200002d4 	.word	0x200002d4
 8000494:	20000284 	.word	0x20000284
 8000498:	08003d8c 	.word	0x08003d8c

0800049c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	  static char c = 'A';
	  xQueueSend(queue, (void*)c, 1);
 80004a4:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <StartTask03+0x44>)
 80004a6:	6818      	ldr	r0, [r3, #0]
 80004a8:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <StartTask03+0x48>)
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	4619      	mov	r1, r3
 80004ae:	2300      	movs	r3, #0
 80004b0:	2201      	movs	r2, #1
 80004b2:	f001 fe9b 	bl	80021ec <xQueueGenericSend>


	  uint8_t data[] = "Task3\n\r";
 80004b6:	4a0c      	ldr	r2, [pc, #48]	; (80004e8 <StartTask03+0x4c>)
 80004b8:	f107 0308 	add.w	r3, r7, #8
 80004bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004c0:	e883 0003 	stmia.w	r3, {r0, r1}
	  HAL_UART_Transmit(&huart2, data, sizeof(data), 500);
 80004c4:	f107 0108 	add.w	r1, r7, #8
 80004c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004cc:	2208      	movs	r2, #8
 80004ce:	4807      	ldr	r0, [pc, #28]	; (80004ec <StartTask03+0x50>)
 80004d0:	f001 fb2d 	bl	8001b2e <HAL_UART_Transmit>
	  osDelay(5000);
 80004d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80004d8:	f001 fcfe 	bl	8001ed8 <osDelay>
  {
 80004dc:	e7e2      	b.n	80004a4 <StartTask03+0x8>
 80004de:	bf00      	nop
 80004e0:	200002d4 	.word	0x200002d4
 80004e4:	20000000 	.word	0x20000000
 80004e8:	08003d98 	.word	0x08003d98
 80004ec:	20000284 	.word	0x20000284

080004f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000502:	f000 f95f 	bl	80007c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40012c00 	.word	0x40012c00

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <HAL_MspInit+0x68>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a17      	ldr	r2, [pc, #92]	; (8000588 <HAL_MspInit+0x68>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <HAL_MspInit+0x68>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_MspInit+0x68>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a11      	ldr	r2, [pc, #68]	; (8000588 <HAL_MspInit+0x68>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x68>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	210f      	movs	r1, #15
 800055a:	f06f 0001 	mvn.w	r0, #1
 800055e:	f000 fa02 	bl	8000966 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_MspInit+0x6c>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_MspInit+0x6c>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	40010000 	.word	0x40010000

08000590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <HAL_UART_MspInit+0x70>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d123      	bne.n	80005f8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_UART_MspInit+0x74>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <HAL_UART_MspInit+0x74>)
 80005b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ba:	61d3      	str	r3, [r2, #28]
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_UART_MspInit+0x74>)
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <HAL_UART_MspInit+0x74>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <HAL_UART_MspInit+0x74>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <HAL_UART_MspInit+0x74>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005e0:	230c      	movs	r3, #12
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	2302      	movs	r3, #2
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2302      	movs	r3, #2
 80005ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <HAL_UART_MspInit+0x78>)
 80005f4:	f000 f9e2 	bl	80009bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3720      	adds	r7, #32
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40004400 	.word	0x40004400
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800

0800060c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000614:	2300      	movs	r3, #0
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000622:	4b2e      	ldr	r3, [pc, #184]	; (80006dc <HAL_InitTick+0xd0>)
 8000624:	699b      	ldr	r3, [r3, #24]
 8000626:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <HAL_InitTick+0xd0>)
 8000628:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <HAL_InitTick+0xd0>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800063a:	f107 020c 	add.w	r2, r7, #12
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f000 ff8d 	bl	8001564 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800064a:	f000 ff77 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 800064e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <HAL_InitTick+0xd4>)
 8000654:	fba2 2303 	umull	r2, r3, r2, r3
 8000658:	0c9b      	lsrs	r3, r3, #18
 800065a:	3b01      	subs	r3, #1
 800065c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <HAL_InitTick+0xd8>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <HAL_InitTick+0xdc>)
 8000662:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <HAL_InitTick+0xd8>)
 8000666:	f240 32e7 	movw	r2, #999	; 0x3e7
 800066a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800066c:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <HAL_InitTick+0xd8>)
 800066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000670:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000672:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <HAL_InitTick+0xd8>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <HAL_InitTick+0xd8>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <HAL_InitTick+0xd8>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000684:	4817      	ldr	r0, [pc, #92]	; (80006e4 <HAL_InitTick+0xd8>)
 8000686:	f000 ffbb 	bl	8001600 <HAL_TIM_Base_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000690:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000694:	2b00      	cmp	r3, #0
 8000696:	d11b      	bne.n	80006d0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000698:	4812      	ldr	r0, [pc, #72]	; (80006e4 <HAL_InitTick+0xd8>)
 800069a:	f001 f809 	bl	80016b0 <HAL_TIM_Base_Start_IT>
 800069e:	4603      	mov	r3, r0
 80006a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80006a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d111      	bne.n	80006d0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80006ac:	2019      	movs	r0, #25
 80006ae:	f000 f976 	bl	800099e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d808      	bhi.n	80006ca <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	2019      	movs	r0, #25
 80006be:	f000 f952 	bl	8000966 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_InitTick+0xe0>)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	e002      	b.n	80006d0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80006d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3730      	adds	r7, #48	; 0x30
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40021000 	.word	0x40021000
 80006e0:	431bde83 	.word	0x431bde83
 80006e4:	200002d8 	.word	0x200002d8
 80006e8:	40012c00 	.word	0x40012c00
 80006ec:	20000008 	.word	0x20000008

080006f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <NMI_Handler+0x4>

080006f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <HardFault_Handler+0x4>

080006fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <MemManage_Handler+0x4>

08000702 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <BusFault_Handler+0x4>

08000708 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <UsageFault_Handler+0x4>

0800070e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
	...

0800071c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <TIM1_UP_IRQHandler+0x10>)
 8000722:	f001 f817 	bl	8001754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200002d8 	.word	0x200002d8

08000730 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000734:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000738:	f000 faf6 	bl	8000d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800074c:	480c      	ldr	r0, [pc, #48]	; (8000780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800074e:	490d      	ldr	r1, [pc, #52]	; (8000784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000750:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000754:	e002      	b.n	800075c <LoopCopyDataInit>

08000756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800075a:	3304      	adds	r3, #4

0800075c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800075c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800075e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000760:	d3f9      	bcc.n	8000756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000764:	4c0a      	ldr	r4, [pc, #40]	; (8000790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000768:	e001      	b.n	800076e <LoopFillZerobss>

0800076a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800076a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800076c:	3204      	adds	r2, #4

0800076e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800076e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000770:	d3fb      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000772:	f7ff ffe5 	bl	8000740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000776:	f003 fa83 	bl	8003c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077a:	f7ff fd01 	bl	8000180 <main>
  bx lr
 800077e:	4770      	bx	lr
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000784:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000788:	08003dd8 	.word	0x08003dd8
  ldr r2, =_sbss
 800078c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000790:	20001070 	.word	0x20001070

08000794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000794:	e7fe      	b.n	8000794 <ADC1_2_IRQHandler>
	...

08000798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_Init+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a07      	ldr	r2, [pc, #28]	; (80007c0 <HAL_Init+0x28>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f000 f8d1 	bl	8000950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ae:	200f      	movs	r0, #15
 80007b0:	f7ff ff2c 	bl	800060c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b4:	f7ff feb4 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40022000 	.word	0x40022000

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a03      	ldr	r2, [pc, #12]	; (80007e4 <HAL_IncTick+0x20>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	2000000c 	.word	0x2000000c
 80007e4:	20000320 	.word	0x20000320

080007e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	20000320 	.word	0x20000320

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	; (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	2b00      	cmp	r3, #0
 8000870:	db0b      	blt.n	800088a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	f003 021f 	and.w	r2, r3, #31
 8000878:	4906      	ldr	r1, [pc, #24]	; (8000894 <__NVIC_EnableIRQ+0x34>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	095b      	lsrs	r3, r3, #5
 8000880:	2001      	movs	r0, #1
 8000882:	fa00 f202 	lsl.w	r2, r0, r2
 8000886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f7ff ff4f 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000966:	b580      	push	{r7, lr}
 8000968:	b086      	sub	sp, #24
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	60b9      	str	r1, [r7, #8]
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000978:	f7ff ff64 	bl	8000844 <__NVIC_GetPriorityGrouping>
 800097c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	68b9      	ldr	r1, [r7, #8]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff ffb2 	bl	80008ec <NVIC_EncodePriority>
 8000988:	4602      	mov	r2, r0
 800098a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800098e:	4611      	mov	r1, r2
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff81 	bl	8000898 <__NVIC_SetPriority>
}
 8000996:	bf00      	nop
 8000998:	3718      	adds	r7, #24
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	4603      	mov	r3, r0
 80009a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff57 	bl	8000860 <__NVIC_EnableIRQ>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009bc:	b480      	push	{r7}
 80009be:	b08b      	sub	sp, #44	; 0x2c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ce:	e169      	b.n	8000ca4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009d0:	2201      	movs	r2, #1
 80009d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	69fa      	ldr	r2, [r7, #28]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	f040 8158 	bne.w	8000c9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	4a9a      	ldr	r2, [pc, #616]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d05e      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 80009f8:	4a98      	ldr	r2, [pc, #608]	; (8000c5c <HAL_GPIO_Init+0x2a0>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d875      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 80009fe:	4a98      	ldr	r2, [pc, #608]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d058      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a04:	4a96      	ldr	r2, [pc, #600]	; (8000c60 <HAL_GPIO_Init+0x2a4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d86f      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a0a:	4a96      	ldr	r2, [pc, #600]	; (8000c64 <HAL_GPIO_Init+0x2a8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d052      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a10:	4a94      	ldr	r2, [pc, #592]	; (8000c64 <HAL_GPIO_Init+0x2a8>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d869      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a16:	4a94      	ldr	r2, [pc, #592]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d04c      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a1c:	4a92      	ldr	r2, [pc, #584]	; (8000c68 <HAL_GPIO_Init+0x2ac>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d863      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a22:	4a92      	ldr	r2, [pc, #584]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d046      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
 8000a28:	4a90      	ldr	r2, [pc, #576]	; (8000c6c <HAL_GPIO_Init+0x2b0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d85d      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a2e:	2b12      	cmp	r3, #18
 8000a30:	d82a      	bhi.n	8000a88 <HAL_GPIO_Init+0xcc>
 8000a32:	2b12      	cmp	r3, #18
 8000a34:	d859      	bhi.n	8000aea <HAL_GPIO_Init+0x12e>
 8000a36:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <HAL_GPIO_Init+0x80>)
 8000a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3c:	08000ab7 	.word	0x08000ab7
 8000a40:	08000a91 	.word	0x08000a91
 8000a44:	08000aa3 	.word	0x08000aa3
 8000a48:	08000ae5 	.word	0x08000ae5
 8000a4c:	08000aeb 	.word	0x08000aeb
 8000a50:	08000aeb 	.word	0x08000aeb
 8000a54:	08000aeb 	.word	0x08000aeb
 8000a58:	08000aeb 	.word	0x08000aeb
 8000a5c:	08000aeb 	.word	0x08000aeb
 8000a60:	08000aeb 	.word	0x08000aeb
 8000a64:	08000aeb 	.word	0x08000aeb
 8000a68:	08000aeb 	.word	0x08000aeb
 8000a6c:	08000aeb 	.word	0x08000aeb
 8000a70:	08000aeb 	.word	0x08000aeb
 8000a74:	08000aeb 	.word	0x08000aeb
 8000a78:	08000aeb 	.word	0x08000aeb
 8000a7c:	08000aeb 	.word	0x08000aeb
 8000a80:	08000a99 	.word	0x08000a99
 8000a84:	08000aad 	.word	0x08000aad
 8000a88:	4a79      	ldr	r2, [pc, #484]	; (8000c70 <HAL_GPIO_Init+0x2b4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d013      	beq.n	8000ab6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8e:	e02c      	b.n	8000aea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	623b      	str	r3, [r7, #32]
          break;
 8000a96:	e029      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	623b      	str	r3, [r7, #32]
          break;
 8000aa0:	e024      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e01f      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	330c      	adds	r3, #12
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e01a      	b.n	8000aec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d102      	bne.n	8000ac4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	623b      	str	r3, [r7, #32]
          break;
 8000ac2:	e013      	b.n	8000aec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d105      	bne.n	8000ad8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000acc:	2308      	movs	r3, #8
 8000ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	69fa      	ldr	r2, [r7, #28]
 8000ad4:	611a      	str	r2, [r3, #16]
          break;
 8000ad6:	e009      	b.n	8000aec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad8:	2308      	movs	r3, #8
 8000ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	615a      	str	r2, [r3, #20]
          break;
 8000ae2:	e003      	b.n	8000aec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
          break;
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x130>
          break;
 8000aea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	2bff      	cmp	r3, #255	; 0xff
 8000af0:	d801      	bhi.n	8000af6 <HAL_GPIO_Init+0x13a>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	e001      	b.n	8000afa <HAL_GPIO_Init+0x13e>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3304      	adds	r3, #4
 8000afa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	2bff      	cmp	r3, #255	; 0xff
 8000b00:	d802      	bhi.n	8000b08 <HAL_GPIO_Init+0x14c>
 8000b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	e002      	b.n	8000b0e <HAL_GPIO_Init+0x152>
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	3b08      	subs	r3, #8
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	210f      	movs	r1, #15
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	401a      	ands	r2, r3
 8000b20:	6a39      	ldr	r1, [r7, #32]
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	fa01 f303 	lsl.w	r3, r1, r3
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	f000 80b1 	beq.w	8000c9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3c:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a4c      	ldr	r2, [pc, #304]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <HAL_GPIO_Init+0x2b8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0301 	and.w	r3, r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b54:	4a48      	ldr	r2, [pc, #288]	; (8000c78 <HAL_GPIO_Init+0x2bc>)
 8000b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b70:	43db      	mvns	r3, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a40      	ldr	r2, [pc, #256]	; (8000c7c <HAL_GPIO_Init+0x2c0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d013      	beq.n	8000ba8 <HAL_GPIO_Init+0x1ec>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a3f      	ldr	r2, [pc, #252]	; (8000c80 <HAL_GPIO_Init+0x2c4>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d00d      	beq.n	8000ba4 <HAL_GPIO_Init+0x1e8>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <HAL_GPIO_Init+0x2c8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d007      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e4>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a3d      	ldr	r2, [pc, #244]	; (8000c88 <HAL_GPIO_Init+0x2cc>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d101      	bne.n	8000b9c <HAL_GPIO_Init+0x1e0>
 8000b98:	2303      	movs	r3, #3
 8000b9a:	e006      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	e004      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	e002      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e000      	b.n	8000baa <HAL_GPIO_Init+0x1ee>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bac:	f002 0203 	and.w	r2, r2, #3
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bba:	492f      	ldr	r1, [pc, #188]	; (8000c78 <HAL_GPIO_Init+0x2bc>)
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	089b      	lsrs	r3, r3, #2
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d006      	beq.n	8000be2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	492c      	ldr	r1, [pc, #176]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	600b      	str	r3, [r1, #0]
 8000be0:	e006      	b.n	8000bf0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4928      	ldr	r1, [pc, #160]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d006      	beq.n	8000c0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	4922      	ldr	r1, [pc, #136]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	4313      	orrs	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
 8000c08:	e006      	b.n	8000c18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	43db      	mvns	r3, r3
 8000c12:	491e      	ldr	r1, [pc, #120]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c14:	4013      	ands	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	4918      	ldr	r1, [pc, #96]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	608b      	str	r3, [r1, #8]
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c32:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4914      	ldr	r1, [pc, #80]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d021      	beq.n	8000c90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	490e      	ldr	r1, [pc, #56]	; (8000c8c <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60cb      	str	r3, [r1, #12]
 8000c58:	e021      	b.n	8000c9e <HAL_GPIO_Init+0x2e2>
 8000c5a:	bf00      	nop
 8000c5c:	10320000 	.word	0x10320000
 8000c60:	10310000 	.word	0x10310000
 8000c64:	10220000 	.word	0x10220000
 8000c68:	10210000 	.word	0x10210000
 8000c6c:	10120000 	.word	0x10120000
 8000c70:	10110000 	.word	0x10110000
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000
 8000c7c:	40010800 	.word	0x40010800
 8000c80:	40010c00 	.word	0x40010c00
 8000c84:	40011000 	.word	0x40011000
 8000c88:	40011400 	.word	0x40011400
 8000c8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_GPIO_Init+0x304>)
 8000c92:	68da      	ldr	r2, [r3, #12]
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	4909      	ldr	r1, [pc, #36]	; (8000cc0 <HAL_GPIO_Init+0x304>)
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f47f ae8e 	bne.w	80009d0 <HAL_GPIO_Init+0x14>
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	bf00      	nop
 8000cb8:	372c      	adds	r7, #44	; 0x2c
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	40010400 	.word	0x40010400

08000cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	460b      	mov	r3, r1
 8000cce:	807b      	strh	r3, [r7, #2]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd4:	787b      	ldrb	r3, [r7, #1]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cda:	887a      	ldrh	r2, [r7, #2]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ce0:	e003      	b.n	8000cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	041a      	lsls	r2, r3, #16
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	611a      	str	r2, [r3, #16]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	041a      	lsls	r2, r3, #16
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	43d9      	mvns	r1, r3
 8000d12:	887b      	ldrh	r3, [r7, #2]
 8000d14:	400b      	ands	r3, r1
 8000d16:	431a      	orrs	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	611a      	str	r2, [r3, #16]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d34:	695a      	ldr	r2, [r3, #20]
 8000d36:	88fb      	ldrh	r3, [r7, #6]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d006      	beq.n	8000d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f806 	bl	8000d58 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e272      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8087 	beq.w	8000e9a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d8c:	4b92      	ldr	r3, [pc, #584]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d00c      	beq.n	8000db2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d98:	4b8f      	ldr	r3, [pc, #572]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 030c 	and.w	r3, r3, #12
 8000da0:	2b08      	cmp	r3, #8
 8000da2:	d112      	bne.n	8000dca <HAL_RCC_OscConfig+0x5e>
 8000da4:	4b8c      	ldr	r3, [pc, #560]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db0:	d10b      	bne.n	8000dca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db2:	4b89      	ldr	r3, [pc, #548]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d06c      	beq.n	8000e98 <HAL_RCC_OscConfig+0x12c>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d168      	bne.n	8000e98 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e24c      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd2:	d106      	bne.n	8000de2 <HAL_RCC_OscConfig+0x76>
 8000dd4:	4b80      	ldr	r3, [pc, #512]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a7f      	ldr	r2, [pc, #508]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e02e      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10c      	bne.n	8000e04 <HAL_RCC_OscConfig+0x98>
 8000dea:	4b7b      	ldr	r3, [pc, #492]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a7a      	ldr	r2, [pc, #488]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df4:	6013      	str	r3, [r2, #0]
 8000df6:	4b78      	ldr	r3, [pc, #480]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a77      	ldr	r2, [pc, #476]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e00:	6013      	str	r3, [r2, #0]
 8000e02:	e01d      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e0c:	d10c      	bne.n	8000e28 <HAL_RCC_OscConfig+0xbc>
 8000e0e:	4b72      	ldr	r3, [pc, #456]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a71      	ldr	r2, [pc, #452]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e18:	6013      	str	r3, [r2, #0]
 8000e1a:	4b6f      	ldr	r3, [pc, #444]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a6e      	ldr	r2, [pc, #440]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e00b      	b.n	8000e40 <HAL_RCC_OscConfig+0xd4>
 8000e28:	4b6b      	ldr	r3, [pc, #428]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a6a      	ldr	r2, [pc, #424]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b68      	ldr	r3, [pc, #416]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a67      	ldr	r2, [pc, #412]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e3e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d013      	beq.n	8000e70 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fcce 	bl	80007e8 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fcca 	bl	80007e8 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	; 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e200      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e62:	4b5d      	ldr	r3, [pc, #372]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0xe4>
 8000e6e:	e014      	b.n	8000e9a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e70:	f7ff fcba 	bl	80007e8 <HAL_GetTick>
 8000e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e76:	e008      	b.n	8000e8a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e78:	f7ff fcb6 	bl	80007e8 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b64      	cmp	r3, #100	; 0x64
 8000e84:	d901      	bls.n	8000e8a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e1ec      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8a:	4b53      	ldr	r3, [pc, #332]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x10c>
 8000e96:	e000      	b.n	8000e9a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0302 	and.w	r3, r3, #2
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d063      	beq.n	8000f6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ea6:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d00b      	beq.n	8000eca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eb2:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 030c 	and.w	r3, r3, #12
 8000eba:	2b08      	cmp	r3, #8
 8000ebc:	d11c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x18c>
 8000ebe:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eca:	4b43      	ldr	r3, [pc, #268]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x176>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d001      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e1c0      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee2:	4b3d      	ldr	r3, [pc, #244]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	4939      	ldr	r1, [pc, #228]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef6:	e03a      	b.n	8000f6e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d020      	beq.n	8000f42 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f00:	4b36      	ldr	r3, [pc, #216]	; (8000fdc <HAL_RCC_OscConfig+0x270>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f06:	f7ff fc6f 	bl	80007e8 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f0c:	e008      	b.n	8000f20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f0e:	f7ff fc6b 	bl	80007e8 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d901      	bls.n	8000f20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	e1a1      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0f0      	beq.n	8000f0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	4927      	ldr	r1, [pc, #156]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
 8000f40:	e015      	b.n	8000f6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <HAL_RCC_OscConfig+0x270>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f48:	f7ff fc4e 	bl	80007e8 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f4e:	e008      	b.n	8000f62 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f50:	f7ff fc4a 	bl	80007e8 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d901      	bls.n	8000f62 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e180      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f62:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f0      	bne.n	8000f50 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0308 	and.w	r3, r3, #8
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d03a      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d019      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <HAL_RCC_OscConfig+0x274>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f88:	f7ff fc2e 	bl	80007e8 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f90:	f7ff fc2a 	bl	80007e8 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e160      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0f0      	beq.n	8000f90 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f000 fb08 	bl	80015c4 <RCC_Delay>
 8000fb4:	e01c      	b.n	8000ff0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_RCC_OscConfig+0x274>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fbc:	f7ff fc14 	bl	80007e8 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc2:	e00f      	b.n	8000fe4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc4:	f7ff fc10 	bl	80007e8 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d908      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e146      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	42420000 	.word	0x42420000
 8000fe0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe4:	4b92      	ldr	r3, [pc, #584]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1e9      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80a6 	beq.w	800114a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001002:	4b8b      	ldr	r3, [pc, #556]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10d      	bne.n	800102a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b88      	ldr	r3, [pc, #544]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a87      	ldr	r2, [pc, #540]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b85      	ldr	r3, [pc, #532]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001026:	2301      	movs	r3, #1
 8001028:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102a:	4b82      	ldr	r3, [pc, #520]	; (8001234 <HAL_RCC_OscConfig+0x4c8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	2b00      	cmp	r3, #0
 8001034:	d118      	bne.n	8001068 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001036:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <HAL_RCC_OscConfig+0x4c8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a7e      	ldr	r2, [pc, #504]	; (8001234 <HAL_RCC_OscConfig+0x4c8>)
 800103c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001040:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001042:	f7ff fbd1 	bl	80007e8 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104a:	f7ff fbcd 	bl	80007e8 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e103      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105c:	4b75      	ldr	r3, [pc, #468]	; (8001234 <HAL_RCC_OscConfig+0x4c8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x312>
 8001070:	4b6f      	ldr	r3, [pc, #444]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4a6e      	ldr	r2, [pc, #440]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	6213      	str	r3, [r2, #32]
 800107c:	e02d      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0x334>
 8001086:	4b6a      	ldr	r3, [pc, #424]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4a69      	ldr	r2, [pc, #420]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	6213      	str	r3, [r2, #32]
 8001092:	4b67      	ldr	r3, [pc, #412]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4a66      	ldr	r2, [pc, #408]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001098:	f023 0304 	bic.w	r3, r3, #4
 800109c:	6213      	str	r3, [r2, #32]
 800109e:	e01c      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b05      	cmp	r3, #5
 80010a6:	d10c      	bne.n	80010c2 <HAL_RCC_OscConfig+0x356>
 80010a8:	4b61      	ldr	r3, [pc, #388]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	4a60      	ldr	r2, [pc, #384]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6213      	str	r3, [r2, #32]
 80010b4:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	4a5d      	ldr	r2, [pc, #372]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6213      	str	r3, [r2, #32]
 80010c0:	e00b      	b.n	80010da <HAL_RCC_OscConfig+0x36e>
 80010c2:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a5a      	ldr	r2, [pc, #360]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	f023 0301 	bic.w	r3, r3, #1
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	4b58      	ldr	r3, [pc, #352]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4a57      	ldr	r2, [pc, #348]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	f023 0304 	bic.w	r3, r3, #4
 80010d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d015      	beq.n	800110e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fb81 	bl	80007e8 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e8:	e00a      	b.n	8001100 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ea:	f7ff fb7d 	bl	80007e8 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e0b1      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001100:	4b4b      	ldr	r3, [pc, #300]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001102:	6a1b      	ldr	r3, [r3, #32]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d0ee      	beq.n	80010ea <HAL_RCC_OscConfig+0x37e>
 800110c:	e014      	b.n	8001138 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fb6b 	bl	80007e8 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff fb67 	bl	80007e8 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e09b      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800112c:	4b40      	ldr	r3, [pc, #256]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1ee      	bne.n	8001116 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d105      	bne.n	800114a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	4a3b      	ldr	r2, [pc, #236]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001148:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 8087 	beq.w	8001262 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001154:	4b36      	ldr	r3, [pc, #216]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 030c 	and.w	r3, r3, #12
 800115c:	2b08      	cmp	r3, #8
 800115e:	d061      	beq.n	8001224 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69db      	ldr	r3, [r3, #28]
 8001164:	2b02      	cmp	r3, #2
 8001166:	d146      	bne.n	80011f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001168:	4b33      	ldr	r3, [pc, #204]	; (8001238 <HAL_RCC_OscConfig+0x4cc>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116e:	f7ff fb3b 	bl	80007e8 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001174:	e008      	b.n	8001188 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001176:	f7ff fb37 	bl	80007e8 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d901      	bls.n	8001188 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e06d      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f0      	bne.n	8001176 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800119c:	d108      	bne.n	80011b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	4921      	ldr	r1, [pc, #132]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a19      	ldr	r1, [r3, #32]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	430b      	orrs	r3, r1
 80011c2:	491b      	ldr	r1, [pc, #108]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_RCC_OscConfig+0x4cc>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ce:	f7ff fb0b 	bl	80007e8 <HAL_GetTick>
 80011d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011d6:	f7ff fb07 	bl	80007e8 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e03d      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <HAL_RCC_OscConfig+0x46a>
 80011f4:	e035      	b.n	8001262 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <HAL_RCC_OscConfig+0x4cc>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fc:	f7ff faf4 	bl	80007e8 <HAL_GetTick>
 8001200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff faf0 	bl	80007e8 <HAL_GetTick>
 8001208:	4602      	mov	r2, r0
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e026      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_RCC_OscConfig+0x4c4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x498>
 8001222:	e01e      	b.n	8001262 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d107      	bne.n	800123c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e019      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
 8001230:	40021000 	.word	0x40021000
 8001234:	40007000 	.word	0x40007000
 8001238:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_RCC_OscConfig+0x500>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	429a      	cmp	r2, r3
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800125a:	429a      	cmp	r2, r3
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000

08001270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0d0      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001284:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d910      	bls.n	80012b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 0207 	bic.w	r2, r3, #7
 800129a:	4965      	ldr	r1, [pc, #404]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a2:	4b63      	ldr	r3, [pc, #396]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0b8      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012cc:	4b59      	ldr	r3, [pc, #356]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4a58      	ldr	r2, [pc, #352]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	494d      	ldr	r1, [pc, #308]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d040      	beq.n	8001390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d107      	bne.n	8001326 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d115      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e07f      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e073      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e06b      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134e:	4b39      	ldr	r3, [pc, #228]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f023 0203 	bic.w	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4936      	ldr	r1, [pc, #216]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001360:	f7ff fa42 	bl	80007e8 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	e00a      	b.n	800137e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001368:	f7ff fa3e 	bl	80007e8 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e053      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 020c 	and.w	r2, r3, #12
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d1eb      	bne.n	8001368 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d210      	bcs.n	80013c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b24      	ldr	r3, [pc, #144]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 0207 	bic.w	r2, r3, #7
 80013a6:	4922      	ldr	r1, [pc, #136]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e032      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4916      	ldr	r1, [pc, #88]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	490e      	ldr	r1, [pc, #56]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fe:	f000 f821 	bl	8001444 <HAL_RCC_GetSysClockFreq>
 8001402:	4602      	mov	r2, r0
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	490a      	ldr	r1, [pc, #40]	; (8001438 <HAL_RCC_ClockConfig+0x1c8>)
 8001410:	5ccb      	ldrb	r3, [r1, r3]
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_RCC_ClockConfig+0x1cc>)
 8001418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_RCC_ClockConfig+0x1d0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8f4 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40022000 	.word	0x40022000
 8001434:	40021000 	.word	0x40021000
 8001438:	08003db8 	.word	0x08003db8
 800143c:	20000004 	.word	0x20000004
 8001440:	20000008 	.word	0x20000008

08001444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001444:	b490      	push	{r4, r7}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800144a:	4b29      	ldr	r3, [pc, #164]	; (80014f0 <HAL_RCC_GetSysClockFreq+0xac>)
 800144c:	1d3c      	adds	r4, r7, #4
 800144e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001454:	f240 2301 	movw	r3, #513	; 0x201
 8001458:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b04      	cmp	r3, #4
 800147c:	d002      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x40>
 800147e:	2b08      	cmp	r3, #8
 8001480:	d003      	beq.n	800148a <HAL_RCC_GetSysClockFreq+0x46>
 8001482:	e02b      	b.n	80014dc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001484:	4b1c      	ldr	r3, [pc, #112]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001486:	623b      	str	r3, [r7, #32]
      break;
 8001488:	e02b      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	0c9b      	lsrs	r3, r3, #18
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	3328      	adds	r3, #40	; 0x28
 8001494:	443b      	add	r3, r7
 8001496:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800149a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d012      	beq.n	80014cc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	0c5b      	lsrs	r3, r3, #17
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	3328      	adds	r3, #40	; 0x28
 80014b2:	443b      	add	r3, r7
 80014b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014be:	fb03 f202 	mul.w	r2, r3, r2
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	e004      	b.n	80014d6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	623b      	str	r3, [r7, #32]
      break;
 80014da:	e002      	b.n	80014e2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014de:	623b      	str	r3, [r7, #32]
      break;
 80014e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014e2:	6a3b      	ldr	r3, [r7, #32]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3728      	adds	r7, #40	; 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc90      	pop	{r4, r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	08003da0 	.word	0x08003da0
 80014f4:	40021000 	.word	0x40021000
 80014f8:	007a1200 	.word	0x007a1200
 80014fc:	003d0900 	.word	0x003d0900

08001500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <HAL_RCC_GetHCLKFreq+0x10>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001518:	f7ff fff2 	bl	8001500 <HAL_RCC_GetHCLKFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	4903      	ldr	r1, [pc, #12]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001530:	4618      	mov	r0, r3
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40021000 	.word	0x40021000
 8001538:	08003dc8 	.word	0x08003dc8

0800153c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001540:	f7ff ffde 	bl	8001500 <HAL_RCC_GetHCLKFreq>
 8001544:	4602      	mov	r2, r0
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	0adb      	lsrs	r3, r3, #11
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	4903      	ldr	r1, [pc, #12]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001552:	5ccb      	ldrb	r3, [r1, r3]
 8001554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000
 8001560:	08003dc8 	.word	0x08003dc8

08001564 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	220f      	movs	r2, #15
 8001572:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_RCC_GetClockConfig+0x58>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_RCC_GetClockConfig+0x58>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_RCC_GetClockConfig+0x58>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_RCC_GetClockConfig+0x58>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	08db      	lsrs	r3, r3, #3
 800159e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_GetClockConfig+0x5c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0207 	and.w	r2, r3, #7
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40022000 	.word	0x40022000

080015c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015cc:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <RCC_Delay+0x34>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <RCC_Delay+0x38>)
 80015d2:	fba2 2303 	umull	r2, r3, r2, r3
 80015d6:	0a5b      	lsrs	r3, r3, #9
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	fb02 f303 	mul.w	r3, r2, r3
 80015de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015e0:	bf00      	nop
  }
  while (Delay --);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	1e5a      	subs	r2, r3, #1
 80015e6:	60fa      	str	r2, [r7, #12]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1f9      	bne.n	80015e0 <RCC_Delay+0x1c>
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr
 80015f8:	20000004 	.word	0x20000004
 80015fc:	10624dd3 	.word	0x10624dd3

08001600 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e041      	b.n	8001696 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f839 	bl	800169e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2202      	movs	r2, #2
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3304      	adds	r3, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4610      	mov	r0, r2
 8001640:	f000 f9b4 	bl	80019ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d001      	beq.n	80016c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e03a      	b.n	800173e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2202      	movs	r2, #2
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a18      	ldr	r2, [pc, #96]	; (8001748 <HAL_TIM_Base_Start_IT+0x98>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00e      	beq.n	8001708 <HAL_TIM_Base_Start_IT+0x58>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f2:	d009      	beq.n	8001708 <HAL_TIM_Base_Start_IT+0x58>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a14      	ldr	r2, [pc, #80]	; (800174c <HAL_TIM_Base_Start_IT+0x9c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d004      	beq.n	8001708 <HAL_TIM_Base_Start_IT+0x58>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <HAL_TIM_Base_Start_IT+0xa0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d111      	bne.n	800172c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b06      	cmp	r3, #6
 8001718:	d010      	beq.n	800173c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f042 0201 	orr.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800172a:	e007      	b.n	800173c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	40012c00 	.word	0x40012c00
 800174c:	40000400 	.word	0x40000400
 8001750:	40000800 	.word	0x40000800

08001754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d122      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b02      	cmp	r3, #2
 8001776:	d11b      	bne.n	80017b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f06f 0202 	mvn.w	r2, #2
 8001780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f000 f8ed 	bl	8001976 <HAL_TIM_IC_CaptureCallback>
 800179c:	e005      	b.n	80017aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f8e0 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f8ef 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d122      	bne.n	8001804 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d11b      	bne.n	8001804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f06f 0204 	mvn.w	r2, #4
 80017d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2202      	movs	r2, #2
 80017da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f8c3 	bl	8001976 <HAL_TIM_IC_CaptureCallback>
 80017f0:	e005      	b.n	80017fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f8b6 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f8c5 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b08      	cmp	r3, #8
 8001810:	d122      	bne.n	8001858 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	2b08      	cmp	r3, #8
 800181e:	d11b      	bne.n	8001858 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0208 	mvn.w	r2, #8
 8001828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f899 	bl	8001976 <HAL_TIM_IC_CaptureCallback>
 8001844:	e005      	b.n	8001852 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 f88c 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f89b 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b10      	cmp	r3, #16
 8001864:	d122      	bne.n	80018ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b10      	cmp	r3, #16
 8001872:	d11b      	bne.n	80018ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0210 	mvn.w	r2, #16
 800187c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2208      	movs	r2, #8
 8001882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f000 f86f 	bl	8001976 <HAL_TIM_IC_CaptureCallback>
 8001898:	e005      	b.n	80018a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f000 f862 	bl	8001964 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 f871 	bl	8001988 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d10e      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d107      	bne.n	80018d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0201 	mvn.w	r2, #1
 80018d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7fe fe0c 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	2b80      	cmp	r3, #128	; 0x80
 80018e4:	d10e      	bne.n	8001904 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d107      	bne.n	8001904 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8bf 	bl	8001a82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800190e:	2b40      	cmp	r3, #64	; 0x40
 8001910:	d10e      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191c:	2b40      	cmp	r3, #64	; 0x40
 800191e:	d107      	bne.n	8001930 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f835 	bl	800199a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	f003 0320 	and.w	r3, r3, #32
 800193a:	2b20      	cmp	r3, #32
 800193c:	d10e      	bne.n	800195c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b20      	cmp	r3, #32
 800194a:	d107      	bne.n	800195c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f06f 0220 	mvn.w	r2, #32
 8001954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f88a 	bl	8001a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr

0800199a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <TIM_Base_SetConfig+0xb8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00b      	beq.n	80019dc <TIM_Base_SetConfig+0x30>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ca:	d007      	beq.n	80019dc <TIM_Base_SetConfig+0x30>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a26      	ldr	r2, [pc, #152]	; (8001a68 <TIM_Base_SetConfig+0xbc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d003      	beq.n	80019dc <TIM_Base_SetConfig+0x30>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <TIM_Base_SetConfig+0xc0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d108      	bne.n	80019ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <TIM_Base_SetConfig+0xb8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00b      	beq.n	8001a0e <TIM_Base_SetConfig+0x62>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019fc:	d007      	beq.n	8001a0e <TIM_Base_SetConfig+0x62>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <TIM_Base_SetConfig+0xbc>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d003      	beq.n	8001a0e <TIM_Base_SetConfig+0x62>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <TIM_Base_SetConfig+0xc0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d108      	bne.n	8001a20 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <TIM_Base_SetConfig+0xb8>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d103      	bne.n	8001a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	615a      	str	r2, [r3, #20]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800

08001a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e03f      	b.n	8001b26 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe fd68 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 f905 	bl	8001ce8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695a      	ldr	r2, [r3, #20]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2220      	movs	r2, #32
 8001b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b08a      	sub	sp, #40	; 0x28
 8001b32:	af02      	add	r7, sp, #8
 8001b34:	60f8      	str	r0, [r7, #12]
 8001b36:	60b9      	str	r1, [r7, #8]
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d17c      	bne.n	8001c48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <HAL_UART_Transmit+0x2c>
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e075      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_UART_Transmit+0x3e>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e06e      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2221      	movs	r2, #33	; 0x21
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b82:	f7fe fe31 	bl	80007e8 <HAL_GetTick>
 8001b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	88fa      	ldrh	r2, [r7, #6]
 8001b8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	88fa      	ldrh	r2, [r7, #6]
 8001b92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9c:	d108      	bne.n	8001bb0 <HAL_UART_Transmit+0x82>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d104      	bne.n	8001bb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	e003      	b.n	8001bb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bc0:	e02a      	b.n	8001c18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f840 	bl	8001c52 <UART_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e036      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	e007      	b.n	8001c0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	3301      	adds	r3, #1
 8001c08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1cf      	bne.n	8001bc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f810 	bl	8001c52 <UART_WaitOnFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e006      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c62:	e02c      	b.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c6a:	d028      	beq.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c72:	f7fe fdb9 	bl	80007e8 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d21d      	bcs.n	8001cbe <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68da      	ldr	r2, [r3, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001c90:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0201 	bic.w	r2, r2, #1
 8001ca0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2220      	movs	r2, #32
 8001cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e00f      	b.n	8001cde <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	bf0c      	ite	eq
 8001cce:	2301      	moveq	r3, #1
 8001cd0:	2300      	movne	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d0c3      	beq.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d22:	f023 030c 	bic.w	r3, r3, #12
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6812      	ldr	r2, [r2, #0]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	430b      	orrs	r3, r1
 8001d2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2c      	ldr	r2, [pc, #176]	; (8001dfc <UART_SetConfig+0x114>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d103      	bne.n	8001d58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d50:	f7ff fbf4 	bl	800153c <HAL_RCC_GetPCLK2Freq>
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	e002      	b.n	8001d5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d58:	f7ff fbdc 	bl	8001514 <HAL_RCC_GetPCLK1Freq>
 8001d5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <UART_SetConfig+0x118>)
 8001d76:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	0119      	lsls	r1, r3, #4
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	009a      	lsls	r2, r3, #2
 8001d88:	441a      	add	r2, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <UART_SetConfig+0x118>)
 8001d96:	fba3 0302 	umull	r0, r3, r3, r2
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2064      	movs	r0, #100	; 0x64
 8001d9e:	fb00 f303 	mul.w	r3, r0, r3
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	3332      	adds	r3, #50	; 0x32
 8001da8:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <UART_SetConfig+0x118>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001db4:	4419      	add	r1, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009a      	lsls	r2, r3, #2
 8001dc0:	441a      	add	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <UART_SetConfig+0x118>)
 8001dce:	fba3 0302 	umull	r0, r3, r3, r2
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2064      	movs	r0, #100	; 0x64
 8001dd6:	fb00 f303 	mul.w	r3, r0, r3
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	3332      	adds	r3, #50	; 0x32
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <UART_SetConfig+0x118>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	440a      	add	r2, r1
 8001df2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40013800 	.word	0x40013800
 8001e00:	51eb851f 	.word	0x51eb851f

08001e04 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001e12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e16:	2b84      	cmp	r3, #132	; 0x84
 8001e18:	d005      	beq.n	8001e26 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001e1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	3303      	adds	r3, #3
 8001e24:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr

08001e32 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001e36:	f000 fe85 	bl	8002b44 <vTaskStartScheduler>
  
  return osOK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af04      	add	r7, sp, #16
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d020      	beq.n	8001e94 <osThreadCreate+0x54>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d01c      	beq.n	8001e94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685c      	ldr	r4, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681d      	ldr	r5, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691e      	ldr	r6, [r3, #16]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ffc9 	bl	8001e04 <makeFreeRtosPriority>
 8001e72:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e7c:	9202      	str	r2, [sp, #8]
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	9100      	str	r1, [sp, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	4632      	mov	r2, r6
 8001e86:	4629      	mov	r1, r5
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f000 fc9d 	bl	80027c8 <xTaskCreateStatic>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e01c      	b.n	8001ece <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685c      	ldr	r4, [r3, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ea0:	b29e      	uxth	r6, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ffab 	bl	8001e04 <makeFreeRtosPriority>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	9200      	str	r2, [sp, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4632      	mov	r2, r6
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f000 fcde 	bl	8002880 <xTaskCreate>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d001      	beq.n	8001ece <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <osDelay+0x16>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	e000      	b.n	8001ef0 <osDelay+0x18>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fdf3 	bl	8002adc <vTaskDelay>
  
  return osOK;
 8001ef6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f103 0208 	add.w	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f103 0208 	add.w	r2, r3, #8
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f103 0208 	add.w	r2, r3, #8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f56:	b480      	push	{r7}
 8001f58:	b085      	sub	sp, #20
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1c5a      	adds	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	601a      	str	r2, [r3, #0]
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr

08001f9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d103      	bne.n	8001fbc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	e00c      	b.n	8001fd6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e002      	b.n	8001fca <vListInsert+0x2e>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68ba      	ldr	r2, [r7, #8]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d2f6      	bcs.n	8001fc4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr

0800200c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6892      	ldr	r2, [r2, #8]
 8002022:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	429a      	cmp	r2, r3
 8002036:	d103      	bne.n	8002040 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
	...

08002060 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002078:	f383 8811 	msr	BASEPRI, r3
 800207c:	f3bf 8f6f 	isb	sy
 8002080:	f3bf 8f4f 	dsb	sy
 8002084:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002086:	bf00      	nop
 8002088:	e7fe      	b.n	8002088 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800208a:	f001 fb5f 	bl	800374c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	68f9      	ldr	r1, [r7, #12]
 8002098:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	441a      	add	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	3b01      	subs	r3, #1
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020c0:	fb01 f303 	mul.w	r3, r1, r3
 80020c4:	441a      	add	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	22ff      	movs	r2, #255	; 0xff
 80020d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d114      	bne.n	800210a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01a      	beq.n	800211e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	3310      	adds	r3, #16
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 ff6f 	bl	8002fd0 <xTaskRemoveFromEventList>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d012      	beq.n	800211e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <xQueueGenericReset+0xcc>)
 80020fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	f3bf 8f4f 	dsb	sy
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	e009      	b.n	800211e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3310      	adds	r3, #16
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fef6 	bl	8001f00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3324      	adds	r3, #36	; 0x24
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fef1 	bl	8001f00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800211e:	f001 fb45 	bl	80037ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002122:	2301      	movs	r3, #1
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	e000ed04 	.word	0xe000ed04

08002130 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	4613      	mov	r3, r2
 800213c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10a      	bne.n	800215a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002148:	f383 8811 	msr	BASEPRI, r3
 800214c:	f3bf 8f6f 	isb	sy
 8002150:	f3bf 8f4f 	dsb	sy
 8002154:	613b      	str	r3, [r7, #16]
}
 8002156:	bf00      	nop
 8002158:	e7fe      	b.n	8002158 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	e004      	b.n	8002170 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3348      	adds	r3, #72	; 0x48
 8002174:	4618      	mov	r0, r3
 8002176:	f001 fbab 	bl	80038d0 <pvPortMalloc>
 800217a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00f      	beq.n	80021a2 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3348      	adds	r3, #72	; 0x48
 8002186:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002190:	79fa      	ldrb	r2, [r7, #7]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	4613      	mov	r3, r2
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f805 	bl	80021ac <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80021a2:	69bb      	ldr	r3, [r7, #24]
	}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d103      	bne.n	80021c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e002      	b.n	80021ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021da:	2101      	movs	r1, #1
 80021dc:	69b8      	ldr	r0, [r7, #24]
 80021de:	f7ff ff3f 	bl	8002060 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80021fa:	2300      	movs	r3, #0
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <xQueueGenericSend+0x32>
	__asm volatile
 8002208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220c:	f383 8811 	msr	BASEPRI, r3
 8002210:	f3bf 8f6f 	isb	sy
 8002214:	f3bf 8f4f 	dsb	sy
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800221a:	bf00      	nop
 800221c:	e7fe      	b.n	800221c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d103      	bne.n	800222c <xQueueGenericSend+0x40>
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <xQueueGenericSend+0x44>
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <xQueueGenericSend+0x46>
 8002230:	2300      	movs	r3, #0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <xQueueGenericSend+0x60>
	__asm volatile
 8002236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223a:	f383 8811 	msr	BASEPRI, r3
 800223e:	f3bf 8f6f 	isb	sy
 8002242:	f3bf 8f4f 	dsb	sy
 8002246:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002248:	bf00      	nop
 800224a:	e7fe      	b.n	800224a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d103      	bne.n	800225a <xQueueGenericSend+0x6e>
 8002252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	2b01      	cmp	r3, #1
 8002258:	d101      	bne.n	800225e <xQueueGenericSend+0x72>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <xQueueGenericSend+0x74>
 800225e:	2300      	movs	r3, #0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <xQueueGenericSend+0x8e>
	__asm volatile
 8002264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002268:	f383 8811 	msr	BASEPRI, r3
 800226c:	f3bf 8f6f 	isb	sy
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	623b      	str	r3, [r7, #32]
}
 8002276:	bf00      	nop
 8002278:	e7fe      	b.n	8002278 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800227a:	f001 f869 	bl	8003350 <xTaskGetSchedulerState>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <xQueueGenericSend+0x9e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <xQueueGenericSend+0xa2>
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <xQueueGenericSend+0xa4>
 800228e:	2300      	movs	r3, #0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <xQueueGenericSend+0xbe>
	__asm volatile
 8002294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002298:	f383 8811 	msr	BASEPRI, r3
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	f3bf 8f4f 	dsb	sy
 80022a4:	61fb      	str	r3, [r7, #28]
}
 80022a6:	bf00      	nop
 80022a8:	e7fe      	b.n	80022a8 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022aa:	f001 fa4f 	bl	800374c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80022ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <xQueueGenericSend+0xd4>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d129      	bne.n	8002314 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022c6:	f000 f96f 	bl	80025a8 <prvCopyDataToQueue>
 80022ca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d010      	beq.n	80022f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	3324      	adds	r3, #36	; 0x24
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fe79 	bl	8002fd0 <xTaskRemoveFromEventList>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80022e4:	4b3f      	ldr	r3, [pc, #252]	; (80023e4 <xQueueGenericSend+0x1f8>)
 80022e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	e00a      	b.n	800230c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80022f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <xQueueGenericSend+0x1f8>)
 80022fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800230c:	f001 fa4e 	bl	80037ac <vPortExitCritical>
				return pdPASS;
 8002310:	2301      	movs	r3, #1
 8002312:	e063      	b.n	80023dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800231a:	f001 fa47 	bl	80037ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800231e:	2300      	movs	r3, #0
 8002320:	e05c      	b.n	80023dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002324:	2b00      	cmp	r3, #0
 8002326:	d106      	bne.n	8002336 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4618      	mov	r0, r3
 800232e:	f000 feb1 	bl	8003094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002332:	2301      	movs	r3, #1
 8002334:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002336:	f001 fa39 	bl	80037ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800233a:	f000 fc63 	bl	8002c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800233e:	f001 fa05 	bl	800374c <vPortEnterCritical>
 8002342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002348:	b25b      	sxtb	r3, r3
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d103      	bne.n	8002358 <xQueueGenericSend+0x16c>
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800235e:	b25b      	sxtb	r3, r3
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d103      	bne.n	800236e <xQueueGenericSend+0x182>
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800236e:	f001 fa1d 	bl	80037ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002372:	1d3a      	adds	r2, r7, #4
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fea0 	bl	80030c0 <xTaskCheckForTimeOut>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d124      	bne.n	80023d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002386:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002388:	f000 fa06 	bl	8002798 <prvIsQueueFull>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d018      	beq.n	80023c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002394:	3310      	adds	r3, #16
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fdf4 	bl	8002f88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80023a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023a2:	f000 f991 	bl	80026c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80023a6:	f000 fc3b 	bl	8002c20 <xTaskResumeAll>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f47f af7c 	bne.w	80022aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <xQueueGenericSend+0x1f8>)
 80023b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f3bf 8f4f 	dsb	sy
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	e772      	b.n	80022aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80023c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023c6:	f000 f97f 	bl	80026c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023ca:	f000 fc29 	bl	8002c20 <xTaskResumeAll>
 80023ce:	e76c      	b.n	80022aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80023d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80023d2:	f000 f979 	bl	80026c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023d6:	f000 fc23 	bl	8002c20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80023da:	2300      	movs	r3, #0
		}
	}
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3738      	adds	r7, #56	; 0x38
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	e000ed04 	.word	0xe000ed04

080023e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80023fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d10a      	bne.n	8002418 <xQueueReceive+0x30>
	__asm volatile
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	623b      	str	r3, [r7, #32]
}
 8002414:	bf00      	nop
 8002416:	e7fe      	b.n	8002416 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <xQueueReceive+0x3e>
 800241e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <xQueueReceive+0x42>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <xQueueReceive+0x44>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <xQueueReceive+0x5e>
	__asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	61fb      	str	r3, [r7, #28]
}
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002446:	f000 ff83 	bl	8003350 <xTaskGetSchedulerState>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d102      	bne.n	8002456 <xQueueReceive+0x6e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <xQueueReceive+0x72>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <xQueueReceive+0x74>
 800245a:	2300      	movs	r3, #0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10a      	bne.n	8002476 <xQueueReceive+0x8e>
	__asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	61bb      	str	r3, [r7, #24]
}
 8002472:	bf00      	nop
 8002474:	e7fe      	b.n	8002474 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002476:	f001 f969 	bl	800374c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	2b00      	cmp	r3, #0
 8002484:	d01f      	beq.n	80024c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800248a:	f000 f8f7 	bl	800267c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	1e5a      	subs	r2, r3, #1
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00f      	beq.n	80024be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	3310      	adds	r3, #16
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fd94 	bl	8002fd0 <xTaskRemoveFromEventList>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024ae:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <xQueueReceive+0x1bc>)
 80024b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024be:	f001 f975 	bl	80037ac <vPortExitCritical>
				return pdPASS;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e069      	b.n	800259a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d103      	bne.n	80024d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024cc:	f001 f96e 	bl	80037ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024d0:	2300      	movs	r3, #0
 80024d2:	e062      	b.n	800259a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f000 fdd8 	bl	8003094 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024e8:	f001 f960 	bl	80037ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024ec:	f000 fb8a 	bl	8002c04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024f0:	f001 f92c 	bl	800374c <vPortEnterCritical>
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d103      	bne.n	800250a <xQueueReceive+0x122>
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2200      	movs	r2, #0
 8002506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002510:	b25b      	sxtb	r3, r3
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d103      	bne.n	8002520 <xQueueReceive+0x138>
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002520:	f001 f944 	bl	80037ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002524:	1d3a      	adds	r2, r7, #4
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fdc7 	bl	80030c0 <xTaskCheckForTimeOut>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d123      	bne.n	8002580 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800253a:	f000 f917 	bl	800276c <prvIsQueueEmpty>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d017      	beq.n	8002574 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	3324      	adds	r3, #36	; 0x24
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd1b 	bl	8002f88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002554:	f000 f8b8 	bl	80026c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002558:	f000 fb62 	bl	8002c20 <xTaskResumeAll>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d189      	bne.n	8002476 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <xQueueReceive+0x1bc>)
 8002564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	f3bf 8f6f 	isb	sy
 8002572:	e780      	b.n	8002476 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002576:	f000 f8a7 	bl	80026c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800257a:	f000 fb51 	bl	8002c20 <xTaskResumeAll>
 800257e:	e77a      	b.n	8002476 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002582:	f000 f8a1 	bl	80026c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002586:	f000 fb4b 	bl	8002c20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800258a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800258c:	f000 f8ee 	bl	800276c <prvIsQueueEmpty>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	f43f af6f 	beq.w	8002476 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002598:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800259a:	4618      	mov	r0, r3
 800259c:	3730      	adds	r7, #48	; 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	e000ed04 	.word	0xe000ed04

080025a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d14d      	bne.n	800266a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 feda 	bl	800338c <xTaskPriorityDisinherit>
 80025d8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	605a      	str	r2, [r3, #4]
 80025e0:	e043      	b.n	800266a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d119      	bne.n	800261c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6898      	ldr	r0, [r3, #8]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	461a      	mov	r2, r3
 80025f2:	68b9      	ldr	r1, [r7, #8]
 80025f4:	f001 fb68 	bl	8003cc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	441a      	add	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d32b      	bcc.n	800266a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	e026      	b.n	800266a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	68d8      	ldr	r0, [r3, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	461a      	mov	r2, r3
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	f001 fb4e 	bl	8003cc8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	425b      	negs	r3, r3
 8002636:	441a      	add	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d207      	bcs.n	8002658 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	425b      	negs	r3, r3
 8002652:	441a      	add	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d105      	bne.n	800266a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	3b01      	subs	r3, #1
 8002668:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002672:	697b      	ldr	r3, [r7, #20]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d018      	beq.n	80026c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	441a      	add	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d303      	bcc.n	80026b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	461a      	mov	r2, r3
 80026ba:	6838      	ldr	r0, [r7, #0]
 80026bc:	f001 fb04 	bl	8003cc8 <memcpy>
	}
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026d0:	f001 f83c 	bl	800374c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026dc:	e011      	b.n	8002702 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d012      	beq.n	800270c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3324      	adds	r3, #36	; 0x24
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fc70 	bl	8002fd0 <xTaskRemoveFromEventList>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80026f6:	f000 fd45 	bl	8003184 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	dce9      	bgt.n	80026de <prvUnlockQueue+0x16>
 800270a:	e000      	b.n	800270e <prvUnlockQueue+0x46>
					break;
 800270c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	22ff      	movs	r2, #255	; 0xff
 8002712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002716:	f001 f849 	bl	80037ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800271a:	f001 f817 	bl	800374c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002724:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002726:	e011      	b.n	800274c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d012      	beq.n	8002756 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3310      	adds	r3, #16
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fc4b 	bl	8002fd0 <xTaskRemoveFromEventList>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002740:	f000 fd20 	bl	8003184 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002744:	7bbb      	ldrb	r3, [r7, #14]
 8002746:	3b01      	subs	r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800274c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002750:	2b00      	cmp	r3, #0
 8002752:	dce9      	bgt.n	8002728 <prvUnlockQueue+0x60>
 8002754:	e000      	b.n	8002758 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002756:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	22ff      	movs	r2, #255	; 0xff
 800275c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002760:	f001 f824 	bl	80037ac <vPortExitCritical>
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002774:	f000 ffea 	bl	800374c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002780:	2301      	movs	r3, #1
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e001      	b.n	800278a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800278a:	f001 f80f 	bl	80037ac <vPortExitCritical>

	return xReturn;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027a0:	f000 ffd4 	bl	800374c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d102      	bne.n	80027b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80027b0:	2301      	movs	r3, #1
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e001      	b.n	80027ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027ba:	f000 fff7 	bl	80037ac <vPortExitCritical>

	return xReturn;
 80027be:	68fb      	ldr	r3, [r7, #12]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08e      	sub	sp, #56	; 0x38
 80027cc:	af04      	add	r7, sp, #16
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10a      	bne.n	80027f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80027dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e0:	f383 8811 	msr	BASEPRI, r3
 80027e4:	f3bf 8f6f 	isb	sy
 80027e8:	f3bf 8f4f 	dsb	sy
 80027ec:	623b      	str	r3, [r7, #32]
}
 80027ee:	bf00      	nop
 80027f0:	e7fe      	b.n	80027f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <xTaskCreateStatic+0x46>
	__asm volatile
 80027f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027fc:	f383 8811 	msr	BASEPRI, r3
 8002800:	f3bf 8f6f 	isb	sy
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	61fb      	str	r3, [r7, #28]
}
 800280a:	bf00      	nop
 800280c:	e7fe      	b.n	800280c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800280e:	2354      	movs	r3, #84	; 0x54
 8002810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b54      	cmp	r3, #84	; 0x54
 8002816:	d00a      	beq.n	800282e <xTaskCreateStatic+0x66>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	61bb      	str	r3, [r7, #24]
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800282e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01e      	beq.n	8002872 <xTaskCreateStatic+0xaa>
 8002834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002836:	2b00      	cmp	r3, #0
 8002838:	d01b      	beq.n	8002872 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002842:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800284c:	2300      	movs	r3, #0
 800284e:	9303      	str	r3, [sp, #12]
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	9302      	str	r3, [sp, #8]
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f850 	bl	800290a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800286a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800286c:	f000 f8cc 	bl	8002a08 <prvAddNewTaskToReadyList>
 8002870:	e001      	b.n	8002876 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002876:	697b      	ldr	r3, [r7, #20]
	}
 8002878:	4618      	mov	r0, r3
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af04      	add	r7, sp, #16
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	4613      	mov	r3, r2
 800288e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002890:	88fb      	ldrh	r3, [r7, #6]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4618      	mov	r0, r3
 8002896:	f001 f81b 	bl	80038d0 <pvPortMalloc>
 800289a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00e      	beq.n	80028c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80028a2:	2054      	movs	r0, #84	; 0x54
 80028a4:	f001 f814 	bl	80038d0 <pvPortMalloc>
 80028a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
 80028b6:	e005      	b.n	80028c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80028b8:	6978      	ldr	r0, [r7, #20]
 80028ba:	f001 f8cd 	bl	8003a58 <vPortFree>
 80028be:	e001      	b.n	80028c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d017      	beq.n	80028fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028d2:	88fa      	ldrh	r2, [r7, #6]
 80028d4:	2300      	movs	r3, #0
 80028d6:	9303      	str	r3, [sp, #12]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	9302      	str	r3, [sp, #8]
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f80e 	bl	800290a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80028ee:	69f8      	ldr	r0, [r7, #28]
 80028f0:	f000 f88a 	bl	8002a08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028f4:	2301      	movs	r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	e002      	b.n	8002900 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002900:	69bb      	ldr	r3, [r7, #24]
	}
 8002902:	4618      	mov	r0, r3
 8002904:	3720      	adds	r7, #32
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b088      	sub	sp, #32
 800290e:	af00      	add	r7, sp, #0
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002922:	3b01      	subs	r3, #1
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f023 0307 	bic.w	r3, r3, #7
 8002930:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <prvInitialiseNewTask+0x48>
	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	617b      	str	r3, [r7, #20]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002952:	2300      	movs	r3, #0
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	e012      	b.n	800297e <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	7819      	ldrb	r1, [r3, #0]
 8002960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	4413      	add	r3, r2
 8002966:	3334      	adds	r3, #52	; 0x34
 8002968:	460a      	mov	r2, r1
 800296a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d006      	beq.n	8002986 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	3301      	adds	r3, #1
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b0f      	cmp	r3, #15
 8002982:	d9e9      	bls.n	8002958 <prvInitialiseNewTask+0x4e>
 8002984:	e000      	b.n	8002988 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002986:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	2b06      	cmp	r3, #6
 8002994:	d901      	bls.n	800299a <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002996:	2306      	movs	r3, #6
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029a4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	2200      	movs	r2, #0
 80029aa:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	3304      	adds	r3, #4
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fac4 	bl	8001f3e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	3318      	adds	r3, #24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fabf 	bl	8001f3e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c8:	f1c3 0207 	rsb	r2, r3, #7
 80029cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	2200      	movs	r2, #0
 80029da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	68f9      	ldr	r1, [r7, #12]
 80029e8:	69b8      	ldr	r0, [r7, #24]
 80029ea:	f000 fdbb 	bl	8003564 <pxPortInitialiseStack>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a10:	f000 fe9c 	bl	800374c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <prvAddNewTaskToReadyList+0xb8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	4a29      	ldr	r2, [pc, #164]	; (8002ac0 <prvAddNewTaskToReadyList+0xb8>)
 8002a1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a1e:	4b29      	ldr	r3, [pc, #164]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002a26:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <prvAddNewTaskToReadyList+0xb8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d110      	bne.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002a34:	f000 fbca 	bl	80031cc <prvInitialiseTaskLists>
 8002a38:	e00d      	b.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a3a:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <prvAddNewTaskToReadyList+0xc0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d109      	bne.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a42:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d802      	bhi.n	8002a56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a56:	4b1d      	ldr	r3, [pc, #116]	; (8002acc <prvAddNewTaskToReadyList+0xc4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <prvAddNewTaskToReadyList+0xc4>)
 8002a5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	2201      	movs	r2, #1
 8002a66:	409a      	lsls	r2, r3
 8002a68:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	4a18      	ldr	r2, [pc, #96]	; (8002ad0 <prvAddNewTaskToReadyList+0xc8>)
 8002a70:	6013      	str	r3, [r2, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4a15      	ldr	r2, [pc, #84]	; (8002ad4 <prvAddNewTaskToReadyList+0xcc>)
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f7ff fa64 	bl	8001f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a8e:	f000 fe8d 	bl	80037ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <prvAddNewTaskToReadyList+0xc0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00e      	beq.n	8002ab8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <prvAddNewTaskToReadyList+0xbc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d207      	bcs.n	8002ab8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <prvAddNewTaskToReadyList+0xd0>)
 8002aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	f3bf 8f4f 	dsb	sy
 8002ab4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000424 	.word	0x20000424
 8002ac4:	20000324 	.word	0x20000324
 8002ac8:	20000430 	.word	0x20000430
 8002acc:	20000440 	.word	0x20000440
 8002ad0:	2000042c 	.word	0x2000042c
 8002ad4:	20000328 	.word	0x20000328
 8002ad8:	e000ed04 	.word	0xe000ed04

08002adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d017      	beq.n	8002b1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <vTaskDelay+0x60>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <vTaskDelay+0x30>
	__asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	60bb      	str	r3, [r7, #8]
}
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002b0c:	f000 f87a 	bl	8002c04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b10:	2100      	movs	r1, #0
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fcc0 	bl	8003498 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002b18:	f000 f882 	bl	8002c20 <xTaskResumeAll>
 8002b1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <vTaskDelay+0x64>)
 8002b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	2000044c 	.word	0x2000044c
 8002b40:	e000ed04 	.word	0xe000ed04

08002b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002b52:	463a      	mov	r2, r7
 8002b54:	1d39      	adds	r1, r7, #4
 8002b56:	f107 0308 	add.w	r3, r7, #8
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd faf8 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b60:	6839      	ldr	r1, [r7, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	9202      	str	r2, [sp, #8]
 8002b68:	9301      	str	r3, [sp, #4]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	460a      	mov	r2, r1
 8002b72:	491e      	ldr	r1, [pc, #120]	; (8002bec <vTaskStartScheduler+0xa8>)
 8002b74:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <vTaskStartScheduler+0xac>)
 8002b76:	f7ff fe27 	bl	80027c8 <xTaskCreateStatic>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4a1d      	ldr	r2, [pc, #116]	; (8002bf4 <vTaskStartScheduler+0xb0>)
 8002b7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <vTaskStartScheduler+0xb0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e001      	b.n	8002b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d116      	bne.n	8002bc6 <vTaskStartScheduler+0x82>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	613b      	str	r3, [r7, #16]
}
 8002baa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <vTaskStartScheduler+0xb4>)
 8002bae:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <vTaskStartScheduler+0xb8>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <vTaskStartScheduler+0xbc>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002bc0:	f000 fd52 	bl	8003668 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002bc4:	e00e      	b.n	8002be4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d10a      	bne.n	8002be4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	60fb      	str	r3, [r7, #12]
}
 8002be0:	bf00      	nop
 8002be2:	e7fe      	b.n	8002be2 <vTaskStartScheduler+0x9e>
}
 8002be4:	bf00      	nop
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	08003db0 	.word	0x08003db0
 8002bf0:	0800319d 	.word	0x0800319d
 8002bf4:	20000448 	.word	0x20000448
 8002bf8:	20000444 	.word	0x20000444
 8002bfc:	20000430 	.word	0x20000430
 8002c00:	20000428 	.word	0x20000428

08002c04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <vTaskSuspendAll+0x18>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	4a03      	ldr	r2, [pc, #12]	; (8002c1c <vTaskSuspendAll+0x18>)
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	2000044c 	.word	0x2000044c

08002c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <xTaskResumeAll+0x114>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <xTaskResumeAll+0x2c>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	603b      	str	r3, [r7, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	e7fe      	b.n	8002c4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002c4c:	f000 fd7e 	bl	800374c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002c50:	4b38      	ldr	r3, [pc, #224]	; (8002d34 <xTaskResumeAll+0x114>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	4a37      	ldr	r2, [pc, #220]	; (8002d34 <xTaskResumeAll+0x114>)
 8002c58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c5a:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <xTaskResumeAll+0x114>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d161      	bne.n	8002d26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c62:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <xTaskResumeAll+0x118>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d05d      	beq.n	8002d26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c6a:	e02e      	b.n	8002cca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c6c:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <xTaskResumeAll+0x11c>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	3318      	adds	r3, #24
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff f9c7 	bl	800200c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff f9c2 	bl	800200c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <xTaskResumeAll+0x120>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	4a2a      	ldr	r2, [pc, #168]	; (8002d40 <xTaskResumeAll+0x120>)
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <xTaskResumeAll+0x124>)
 8002ca8:	441a      	add	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3304      	adds	r3, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7ff f950 	bl	8001f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cba:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <xTaskResumeAll+0x128>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d302      	bcc.n	8002cca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002cc4:	4b21      	ldr	r3, [pc, #132]	; (8002d4c <xTaskResumeAll+0x12c>)
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <xTaskResumeAll+0x11c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1cc      	bne.n	8002c6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002cd8:	f000 fb16 	bl	8003308 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <xTaskResumeAll+0x130>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d010      	beq.n	8002d0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002ce8:	f000 f836 	bl	8002d58 <xTaskIncrementTick>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002cf2:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <xTaskResumeAll+0x12c>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1f1      	bne.n	8002ce8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8002d04:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <xTaskResumeAll+0x130>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002d0a:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <xTaskResumeAll+0x12c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002d16:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <xTaskResumeAll+0x134>)
 8002d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002d26:	f000 fd41 	bl	80037ac <vPortExitCritical>

	return xAlreadyYielded;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2000044c 	.word	0x2000044c
 8002d38:	20000424 	.word	0x20000424
 8002d3c:	200003e4 	.word	0x200003e4
 8002d40:	2000042c 	.word	0x2000042c
 8002d44:	20000328 	.word	0x20000328
 8002d48:	20000324 	.word	0x20000324
 8002d4c:	20000438 	.word	0x20000438
 8002d50:	20000434 	.word	0x20000434
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d62:	4b51      	ldr	r3, [pc, #324]	; (8002ea8 <xTaskIncrementTick+0x150>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 808d 	bne.w	8002e86 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d6c:	4b4f      	ldr	r3, [pc, #316]	; (8002eac <xTaskIncrementTick+0x154>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3301      	adds	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d74:	4a4d      	ldr	r2, [pc, #308]	; (8002eac <xTaskIncrementTick+0x154>)
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d120      	bne.n	8002dc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <xTaskIncrementTick+0x158>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00a      	beq.n	8002da0 <xTaskIncrementTick+0x48>
	__asm volatile
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	603b      	str	r3, [r7, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	e7fe      	b.n	8002d9e <xTaskIncrementTick+0x46>
 8002da0:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <xTaskIncrementTick+0x158>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <xTaskIncrementTick+0x15c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a41      	ldr	r2, [pc, #260]	; (8002eb0 <xTaskIncrementTick+0x158>)
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	4a41      	ldr	r2, [pc, #260]	; (8002eb4 <xTaskIncrementTick+0x15c>)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <xTaskIncrementTick+0x160>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	3301      	adds	r3, #1
 8002dba:	4a3f      	ldr	r2, [pc, #252]	; (8002eb8 <xTaskIncrementTick+0x160>)
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	f000 faa3 	bl	8003308 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <xTaskIncrementTick+0x164>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d34d      	bcc.n	8002e68 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dcc:	4b38      	ldr	r3, [pc, #224]	; (8002eb0 <xTaskIncrementTick+0x158>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <xTaskIncrementTick+0x82>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <xTaskIncrementTick+0x84>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d004      	beq.n	8002dea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <xTaskIncrementTick+0x164>)
 8002de2:	f04f 32ff 	mov.w	r2, #4294967295
 8002de6:	601a      	str	r2, [r3, #0]
					break;
 8002de8:	e03e      	b.n	8002e68 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <xTaskIncrementTick+0x158>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d203      	bcs.n	8002e0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002e02:	4a2e      	ldr	r2, [pc, #184]	; (8002ebc <xTaskIncrementTick+0x164>)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6013      	str	r3, [r2, #0]
						break;
 8002e08:	e02e      	b.n	8002e68 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f8fc 	bl	800200c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	3318      	adds	r3, #24
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff f8f3 	bl	800200c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	409a      	lsls	r2, r3
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <xTaskIncrementTick+0x168>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <xTaskIncrementTick+0x168>)
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4a1f      	ldr	r2, [pc, #124]	; (8002ec4 <xTaskIncrementTick+0x16c>)
 8002e46:	441a      	add	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4610      	mov	r0, r2
 8002e50:	f7ff f881 	bl	8001f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <xTaskIncrementTick+0x170>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d3b4      	bcc.n	8002dcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e66:	e7b1      	b.n	8002dcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <xTaskIncrementTick+0x170>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	4915      	ldr	r1, [pc, #84]	; (8002ec4 <xTaskIncrementTick+0x16c>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d907      	bls.n	8002e90 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002e80:	2301      	movs	r3, #1
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e004      	b.n	8002e90 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <xTaskIncrementTick+0x174>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ecc <xTaskIncrementTick+0x174>)
 8002e8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e90:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <xTaskIncrementTick+0x178>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e9c:	697b      	ldr	r3, [r7, #20]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2000044c 	.word	0x2000044c
 8002eac:	20000428 	.word	0x20000428
 8002eb0:	200003dc 	.word	0x200003dc
 8002eb4:	200003e0 	.word	0x200003e0
 8002eb8:	2000043c 	.word	0x2000043c
 8002ebc:	20000444 	.word	0x20000444
 8002ec0:	2000042c 	.word	0x2000042c
 8002ec4:	20000328 	.word	0x20000328
 8002ec8:	20000324 	.word	0x20000324
 8002ecc:	20000434 	.word	0x20000434
 8002ed0:	20000438 	.word	0x20000438

08002ed4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002eda:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <vTaskSwitchContext+0xa0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ee2:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <vTaskSwitchContext+0xa4>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002ee8:	e03f      	b.n	8002f6a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002eea:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <vTaskSwitchContext+0xa4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <vTaskSwitchContext+0xa8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	fab3 f383 	clz	r3, r3
 8002efc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002efe:	7afb      	ldrb	r3, [r7, #11]
 8002f00:	f1c3 031f 	rsb	r3, r3, #31
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	491e      	ldr	r1, [pc, #120]	; (8002f80 <vTaskSwitchContext+0xac>)
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <vTaskSwitchContext+0x5c>
	__asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	607b      	str	r3, [r7, #4]
}
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <vTaskSwitchContext+0x5a>
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4a11      	ldr	r2, [pc, #68]	; (8002f80 <vTaskSwitchContext+0xac>)
 8002f3c:	4413      	add	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	3308      	adds	r3, #8
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d104      	bne.n	8002f60 <vTaskSwitchContext+0x8c>
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <vTaskSwitchContext+0xb0>)
 8002f68:	6013      	str	r3, [r2, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	371c      	adds	r7, #28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	2000044c 	.word	0x2000044c
 8002f78:	20000438 	.word	0x20000438
 8002f7c:	2000042c 	.word	0x2000042c
 8002f80:	20000328 	.word	0x20000328
 8002f84:	20000324 	.word	0x20000324

08002f88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10a      	bne.n	8002fae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9c:	f383 8811 	msr	BASEPRI, r3
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	60fb      	str	r3, [r7, #12]
}
 8002faa:	bf00      	nop
 8002fac:	e7fe      	b.n	8002fac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <vTaskPlaceOnEventList+0x44>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3318      	adds	r3, #24
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe fff0 	bl	8001f9c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	6838      	ldr	r0, [r7, #0]
 8002fc0:	f000 fa6a 	bl	8003498 <prvAddCurrentTaskToDelayedList>
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000324 	.word	0x20000324

08002fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	60fb      	str	r3, [r7, #12]
}
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	3318      	adds	r3, #24
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f803 	bl	800200c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003006:	4b1d      	ldr	r3, [pc, #116]	; (800307c <xTaskRemoveFromEventList+0xac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d11c      	bne.n	8003048 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	3304      	adds	r3, #4
 8003012:	4618      	mov	r0, r3
 8003014:	f7fe fffa 	bl	800200c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2201      	movs	r2, #1
 800301e:	409a      	lsls	r2, r3
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <xTaskRemoveFromEventList+0xb0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4313      	orrs	r3, r2
 8003026:	4a16      	ldr	r2, [pc, #88]	; (8003080 <xTaskRemoveFromEventList+0xb0>)
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4a13      	ldr	r2, [pc, #76]	; (8003084 <xTaskRemoveFromEventList+0xb4>)
 8003038:	441a      	add	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	3304      	adds	r3, #4
 800303e:	4619      	mov	r1, r3
 8003040:	4610      	mov	r0, r2
 8003042:	f7fe ff88 	bl	8001f56 <vListInsertEnd>
 8003046:	e005      	b.n	8003054 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	3318      	adds	r3, #24
 800304c:	4619      	mov	r1, r3
 800304e:	480e      	ldr	r0, [pc, #56]	; (8003088 <xTaskRemoveFromEventList+0xb8>)
 8003050:	f7fe ff81 	bl	8001f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <xTaskRemoveFromEventList+0xbc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	429a      	cmp	r2, r3
 8003060:	d905      	bls.n	800306e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003062:	2301      	movs	r3, #1
 8003064:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <xTaskRemoveFromEventList+0xc0>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e001      	b.n	8003072 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003072:	697b      	ldr	r3, [r7, #20]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	2000044c 	.word	0x2000044c
 8003080:	2000042c 	.word	0x2000042c
 8003084:	20000328 	.word	0x20000328
 8003088:	200003e4 	.word	0x200003e4
 800308c:	20000324 	.word	0x20000324
 8003090:	20000438 	.word	0x20000438

08003094 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <vTaskInternalSetTimeOutState+0x24>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <vTaskInternalSetTimeOutState+0x28>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	605a      	str	r2, [r3, #4]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	2000043c 	.word	0x2000043c
 80030bc:	20000428 	.word	0x20000428

080030c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	613b      	str	r3, [r7, #16]
}
 80030e2:	bf00      	nop
 80030e4:	e7fe      	b.n	80030e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80030ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f0:	f383 8811 	msr	BASEPRI, r3
 80030f4:	f3bf 8f6f 	isb	sy
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	60fb      	str	r3, [r7, #12]
}
 80030fe:	bf00      	nop
 8003100:	e7fe      	b.n	8003100 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003102:	f000 fb23 	bl	800374c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <xTaskCheckForTimeOut+0xbc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311e:	d102      	bne.n	8003126 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003120:	2300      	movs	r3, #0
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	e023      	b.n	800316e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <xTaskCheckForTimeOut+0xc0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d007      	beq.n	8003142 <xTaskCheckForTimeOut+0x82>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800313c:	2301      	movs	r3, #1
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	e015      	b.n	800316e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	d20b      	bcs.n	8003164 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff ff9b 	bl	8003094 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800315e:	2300      	movs	r3, #0
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	e004      	b.n	800316e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800316a:	2301      	movs	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800316e:	f000 fb1d 	bl	80037ac <vPortExitCritical>

	return xReturn;
 8003172:	69fb      	ldr	r3, [r7, #28]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	20000428 	.word	0x20000428
 8003180:	2000043c 	.word	0x2000043c

08003184 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <vTaskMissedYield+0x14>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
}
 800318e:	bf00      	nop
 8003190:	46bd      	mov	sp, r7
 8003192:	bc80      	pop	{r7}
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000438 	.word	0x20000438

0800319c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031a4:	f000 f852 	bl	800324c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <prvIdleTask+0x28>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d9f9      	bls.n	80031a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <prvIdleTask+0x2c>)
 80031b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80031c0:	e7f0      	b.n	80031a4 <prvIdleTask+0x8>
 80031c2:	bf00      	nop
 80031c4:	20000328 	.word	0x20000328
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	e00c      	b.n	80031f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4a12      	ldr	r2, [pc, #72]	; (800322c <prvInitialiseTaskLists+0x60>)
 80031e4:	4413      	add	r3, r2
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fe8a 	bl	8001f00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3301      	adds	r3, #1
 80031f0:	607b      	str	r3, [r7, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b06      	cmp	r3, #6
 80031f6:	d9ef      	bls.n	80031d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031f8:	480d      	ldr	r0, [pc, #52]	; (8003230 <prvInitialiseTaskLists+0x64>)
 80031fa:	f7fe fe81 	bl	8001f00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031fe:	480d      	ldr	r0, [pc, #52]	; (8003234 <prvInitialiseTaskLists+0x68>)
 8003200:	f7fe fe7e 	bl	8001f00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003204:	480c      	ldr	r0, [pc, #48]	; (8003238 <prvInitialiseTaskLists+0x6c>)
 8003206:	f7fe fe7b 	bl	8001f00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800320a:	480c      	ldr	r0, [pc, #48]	; (800323c <prvInitialiseTaskLists+0x70>)
 800320c:	f7fe fe78 	bl	8001f00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003210:	480b      	ldr	r0, [pc, #44]	; (8003240 <prvInitialiseTaskLists+0x74>)
 8003212:	f7fe fe75 	bl	8001f00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <prvInitialiseTaskLists+0x78>)
 8003218:	4a05      	ldr	r2, [pc, #20]	; (8003230 <prvInitialiseTaskLists+0x64>)
 800321a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <prvInitialiseTaskLists+0x7c>)
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <prvInitialiseTaskLists+0x68>)
 8003220:	601a      	str	r2, [r3, #0]
}
 8003222:	bf00      	nop
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000328 	.word	0x20000328
 8003230:	200003b4 	.word	0x200003b4
 8003234:	200003c8 	.word	0x200003c8
 8003238:	200003e4 	.word	0x200003e4
 800323c:	200003f8 	.word	0x200003f8
 8003240:	20000410 	.word	0x20000410
 8003244:	200003dc 	.word	0x200003dc
 8003248:	200003e0 	.word	0x200003e0

0800324c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003252:	e019      	b.n	8003288 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003254:	f000 fa7a 	bl	800374c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <prvCheckTasksWaitingTermination+0x50>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3304      	adds	r3, #4
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fed1 	bl	800200c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800326a:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <prvCheckTasksWaitingTermination+0x54>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3b01      	subs	r3, #1
 8003270:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <prvCheckTasksWaitingTermination+0x54>)
 8003272:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003274:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <prvCheckTasksWaitingTermination+0x58>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3b01      	subs	r3, #1
 800327a:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <prvCheckTasksWaitingTermination+0x58>)
 800327c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800327e:	f000 fa95 	bl	80037ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f810 	bl	80032a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <prvCheckTasksWaitingTermination+0x58>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1e1      	bne.n	8003254 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	200003f8 	.word	0x200003f8
 80032a0:	20000424 	.word	0x20000424
 80032a4:	2000040c 	.word	0x2000040c

080032a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d108      	bne.n	80032cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fbca 	bl	8003a58 <vPortFree>
				vPortFree( pxTCB );
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 fbc7 	bl	8003a58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80032ca:	e018      	b.n	80032fe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d103      	bne.n	80032de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fbbe 	bl	8003a58 <vPortFree>
	}
 80032dc:	e00f      	b.n	80032fe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d00a      	beq.n	80032fe <prvDeleteTCB+0x56>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	60fb      	str	r3, [r7, #12]
}
 80032fa:	bf00      	nop
 80032fc:	e7fe      	b.n	80032fc <prvDeleteTCB+0x54>
	}
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800330e:	4b0e      	ldr	r3, [pc, #56]	; (8003348 <prvResetNextTaskUnblockTime+0x40>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <prvResetNextTaskUnblockTime+0x14>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <prvResetNextTaskUnblockTime+0x16>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003322:	4b0a      	ldr	r3, [pc, #40]	; (800334c <prvResetNextTaskUnblockTime+0x44>)
 8003324:	f04f 32ff 	mov.w	r2, #4294967295
 8003328:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800332a:	e008      	b.n	800333e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <prvResetNextTaskUnblockTime+0x40>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a04      	ldr	r2, [pc, #16]	; (800334c <prvResetNextTaskUnblockTime+0x44>)
 800333c:	6013      	str	r3, [r2, #0]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr
 8003348:	200003dc 	.word	0x200003dc
 800334c:	20000444 	.word	0x20000444

08003350 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <xTaskGetSchedulerState+0x34>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d102      	bne.n	8003364 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800335e:	2301      	movs	r3, #1
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	e008      	b.n	8003376 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <xTaskGetSchedulerState+0x38>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d102      	bne.n	8003372 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800336c:	2302      	movs	r3, #2
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e001      	b.n	8003376 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003372:	2300      	movs	r3, #0
 8003374:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003376:	687b      	ldr	r3, [r7, #4]
	}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bc80      	pop	{r7}
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	20000430 	.word	0x20000430
 8003388:	2000044c 	.word	0x2000044c

0800338c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003398:	2300      	movs	r3, #0
 800339a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d06e      	beq.n	8003480 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033a2:	4b3a      	ldr	r3, [pc, #232]	; (800348c <xTaskPriorityDisinherit+0x100>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d00a      	beq.n	80033c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	60fb      	str	r3, [r7, #12]
}
 80033be:	bf00      	nop
 80033c0:	e7fe      	b.n	80033c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10a      	bne.n	80033e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	60bb      	str	r3, [r7, #8]
}
 80033dc:	bf00      	nop
 80033de:	e7fe      	b.n	80033de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e4:	1e5a      	subs	r2, r3, #1
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d044      	beq.n	8003480 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d140      	bne.n	8003480 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	3304      	adds	r3, #4
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fe02 	bl	800200c <uxListRemove>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d115      	bne.n	800343a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003412:	491f      	ldr	r1, [pc, #124]	; (8003490 <xTaskPriorityDisinherit+0x104>)
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xTaskPriorityDisinherit+0xae>
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	2201      	movs	r2, #1
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	4b18      	ldr	r3, [pc, #96]	; (8003494 <xTaskPriorityDisinherit+0x108>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4013      	ands	r3, r2
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <xTaskPriorityDisinherit+0x108>)
 8003438:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	f1c3 0207 	rsb	r2, r3, #7
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	2201      	movs	r2, #1
 8003454:	409a      	lsls	r2, r3
 8003456:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <xTaskPriorityDisinherit+0x108>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4313      	orrs	r3, r2
 800345c:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <xTaskPriorityDisinherit+0x108>)
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4a08      	ldr	r2, [pc, #32]	; (8003490 <xTaskPriorityDisinherit+0x104>)
 800346e:	441a      	add	r2, r3
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f7fe fd6d 	bl	8001f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800347c:	2301      	movs	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003480:	697b      	ldr	r3, [r7, #20]
	}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000324 	.word	0x20000324
 8003490:	20000328 	.word	0x20000328
 8003494:	2000042c 	.word	0x2000042c

08003498 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <prvAddCurrentTaskToDelayedList+0xb0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a8:	4b28      	ldr	r3, [pc, #160]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fdac 	bl	800200c <uxListRemove>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	2201      	movs	r2, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43da      	mvns	r2, r3
 80034c8:	4b21      	ldr	r3, [pc, #132]	; (8003550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4013      	ands	r3, r2
 80034ce:	4a20      	ldr	r2, [pc, #128]	; (8003550 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034d0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d10a      	bne.n	80034f0 <prvAddCurrentTaskToDelayedList+0x58>
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3304      	adds	r3, #4
 80034e6:	4619      	mov	r1, r3
 80034e8:	481a      	ldr	r0, [pc, #104]	; (8003554 <prvAddCurrentTaskToDelayedList+0xbc>)
 80034ea:	f7fe fd34 	bl	8001f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034ee:	e026      	b.n	800353e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034f8:	4b14      	ldr	r3, [pc, #80]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	429a      	cmp	r2, r3
 8003506:	d209      	bcs.n	800351c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <prvAddCurrentTaskToDelayedList+0xc0>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b0f      	ldr	r3, [pc, #60]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	3304      	adds	r3, #4
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f7fe fd41 	bl	8001f9c <vListInsert>
}
 800351a:	e010      	b.n	800353e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800351c:	4b0f      	ldr	r3, [pc, #60]	; (800355c <prvAddCurrentTaskToDelayedList+0xc4>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3304      	adds	r3, #4
 8003526:	4619      	mov	r1, r3
 8003528:	4610      	mov	r0, r2
 800352a:	f7fe fd37 	bl	8001f9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d202      	bcs.n	800353e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003538:	4a09      	ldr	r2, [pc, #36]	; (8003560 <prvAddCurrentTaskToDelayedList+0xc8>)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	6013      	str	r3, [r2, #0]
}
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000428 	.word	0x20000428
 800354c:	20000324 	.word	0x20000324
 8003550:	2000042c 	.word	0x2000042c
 8003554:	20000410 	.word	0x20000410
 8003558:	200003e0 	.word	0x200003e0
 800355c:	200003dc 	.word	0x200003dc
 8003560:	20000444 	.word	0x20000444

08003564 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3b04      	subs	r3, #4
 8003574:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800357c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3b04      	subs	r3, #4
 8003582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f023 0201 	bic.w	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	3b04      	subs	r3, #4
 8003592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <pxPortInitialiseStack+0x54>)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3b14      	subs	r3, #20
 800359e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3b20      	subs	r3, #32
 80035aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80035ac:	68fb      	ldr	r3, [r7, #12]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr
 80035b8:	080035bd 	.word	0x080035bd

080035bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80035c6:	4b12      	ldr	r3, [pc, #72]	; (8003610 <prvTaskExitError+0x54>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d00a      	beq.n	80035e6 <prvTaskExitError+0x2a>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	60fb      	str	r3, [r7, #12]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <prvTaskExitError+0x28>
	__asm volatile
 80035e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ea:	f383 8811 	msr	BASEPRI, r3
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	60bb      	str	r3, [r7, #8]
}
 80035f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035fa:	bf00      	nop
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0fc      	beq.n	80035fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003602:	bf00      	nop
 8003604:	bf00      	nop
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000010 	.word	0x20000010
	...

08003620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003620:	4b07      	ldr	r3, [pc, #28]	; (8003640 <pxCurrentTCBConst2>)
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	6808      	ldr	r0, [r1, #0]
 8003626:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800362a:	f380 8809 	msr	PSP, r0
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f04f 0000 	mov.w	r0, #0
 8003636:	f380 8811 	msr	BASEPRI, r0
 800363a:	f04e 0e0d 	orr.w	lr, lr, #13
 800363e:	4770      	bx	lr

08003640 <pxCurrentTCBConst2>:
 8003640:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003644:	bf00      	nop
 8003646:	bf00      	nop

08003648 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003648:	4806      	ldr	r0, [pc, #24]	; (8003664 <prvPortStartFirstTask+0x1c>)
 800364a:	6800      	ldr	r0, [r0, #0]
 800364c:	6800      	ldr	r0, [r0, #0]
 800364e:	f380 8808 	msr	MSP, r0
 8003652:	b662      	cpsie	i
 8003654:	b661      	cpsie	f
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	df00      	svc	0
 8003660:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003662:	bf00      	nop
 8003664:	e000ed08 	.word	0xe000ed08

08003668 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800366e:	4b32      	ldr	r3, [pc, #200]	; (8003738 <xPortStartScheduler+0xd0>)
 8003670:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	22ff      	movs	r2, #255	; 0xff
 800367e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <xPortStartScheduler+0xd4>)
 8003694:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <xPortStartScheduler+0xd8>)
 8003698:	2207      	movs	r2, #7
 800369a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800369c:	e009      	b.n	80036b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800369e:	4b28      	ldr	r3, [pc, #160]	; (8003740 <xPortStartScheduler+0xd8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	4a26      	ldr	r2, [pc, #152]	; (8003740 <xPortStartScheduler+0xd8>)
 80036a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b80      	cmp	r3, #128	; 0x80
 80036bc:	d0ef      	beq.n	800369e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <xPortStartScheduler+0xd8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f1c3 0307 	rsb	r3, r3, #7
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d00a      	beq.n	80036e0 <xPortStartScheduler+0x78>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	60bb      	str	r3, [r7, #8]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036e0:	4b17      	ldr	r3, [pc, #92]	; (8003740 <xPortStartScheduler+0xd8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	4a16      	ldr	r2, [pc, #88]	; (8003740 <xPortStartScheduler+0xd8>)
 80036e8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036ea:	4b15      	ldr	r3, [pc, #84]	; (8003740 <xPortStartScheduler+0xd8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036f2:	4a13      	ldr	r2, [pc, #76]	; (8003740 <xPortStartScheduler+0xd8>)
 80036f4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036fe:	4b11      	ldr	r3, [pc, #68]	; (8003744 <xPortStartScheduler+0xdc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a10      	ldr	r2, [pc, #64]	; (8003744 <xPortStartScheduler+0xdc>)
 8003704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003708:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800370a:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <xPortStartScheduler+0xdc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <xPortStartScheduler+0xdc>)
 8003710:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003714:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003716:	f000 f8b9 	bl	800388c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <xPortStartScheduler+0xe0>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003720:	f7ff ff92 	bl	8003648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003724:	f7ff fbd6 	bl	8002ed4 <vTaskSwitchContext>
	prvTaskExitError();
 8003728:	f7ff ff48 	bl	80035bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	e000e400 	.word	0xe000e400
 800373c:	20000450 	.word	0x20000450
 8003740:	20000454 	.word	0x20000454
 8003744:	e000ed20 	.word	0xe000ed20
 8003748:	20000010 	.word	0x20000010

0800374c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
	__asm volatile
 8003752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	607b      	str	r3, [r7, #4]
}
 8003764:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003766:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <vPortEnterCritical+0x58>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	3301      	adds	r3, #1
 800376c:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <vPortEnterCritical+0x58>)
 800376e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <vPortEnterCritical+0x58>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10f      	bne.n	8003798 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <vPortEnterCritical+0x5c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <vPortEnterCritical+0x4c>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	603b      	str	r3, [r7, #0]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <vPortEnterCritical+0x4a>
	}
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000010 	.word	0x20000010
 80037a8:	e000ed04 	.word	0xe000ed04

080037ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80037b2:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <vPortExitCritical+0x4c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <vPortExitCritical+0x24>
	__asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	607b      	str	r3, [r7, #4]
}
 80037cc:	bf00      	nop
 80037ce:	e7fe      	b.n	80037ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <vPortExitCritical+0x4c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <vPortExitCritical+0x4c>)
 80037d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <vPortExitCritical+0x4c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d105      	bne.n	80037ee <vPortExitCritical+0x42>
 80037e2:	2300      	movs	r3, #0
 80037e4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80037ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	20000010 	.word	0x20000010
 80037fc:	00000000 	.word	0x00000000

08003800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003800:	f3ef 8009 	mrs	r0, PSP
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <pxCurrentTCBConst>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003810:	6010      	str	r0, [r2, #0]
 8003812:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003816:	f04f 0050 	mov.w	r0, #80	; 0x50
 800381a:	f380 8811 	msr	BASEPRI, r0
 800381e:	f7ff fb59 	bl	8002ed4 <vTaskSwitchContext>
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f380 8811 	msr	BASEPRI, r0
 800382a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	6808      	ldr	r0, [r1, #0]
 8003832:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003836:	f380 8809 	msr	PSP, r0
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	4770      	bx	lr

08003840 <pxCurrentTCBConst>:
 8003840:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003844:	bf00      	nop
 8003846:	bf00      	nop

08003848 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	607b      	str	r3, [r7, #4]
}
 8003860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003862:	f7ff fa79 	bl	8002d58 <xTaskIncrementTick>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800386c:	4b06      	ldr	r3, [pc, #24]	; (8003888 <SysTick_Handler+0x40>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f383 8811 	msr	BASEPRI, r3
}
 800387e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	e000ed04 	.word	0xe000ed04

0800388c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <vPortSetupTimerInterrupt+0x30>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <vPortSetupTimerInterrupt+0x34>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <vPortSetupTimerInterrupt+0x38>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <vPortSetupTimerInterrupt+0x3c>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <vPortSetupTimerInterrupt+0x40>)
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80038ae:	4b03      	ldr	r3, [pc, #12]	; (80038bc <vPortSetupTimerInterrupt+0x30>)
 80038b0:	2207      	movs	r2, #7
 80038b2:	601a      	str	r2, [r3, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	e000e010 	.word	0xe000e010
 80038c0:	e000e018 	.word	0xe000e018
 80038c4:	20000004 	.word	0x20000004
 80038c8:	10624dd3 	.word	0x10624dd3
 80038cc:	e000e014 	.word	0xe000e014

080038d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80038dc:	f7ff f992 	bl	8002c04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80038e0:	4b58      	ldr	r3, [pc, #352]	; (8003a44 <pvPortMalloc+0x174>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80038e8:	f000 f910 	bl	8003b0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80038ec:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <pvPortMalloc+0x178>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 808e 	bne.w	8003a16 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01d      	beq.n	800393c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003900:	2208      	movs	r2, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4413      	add	r3, r2
 8003906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	2b00      	cmp	r3, #0
 8003910:	d014      	beq.n	800393c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f023 0307 	bic.w	r3, r3, #7
 8003918:	3308      	adds	r3, #8
 800391a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <pvPortMalloc+0x6c>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	617b      	str	r3, [r7, #20]
}
 8003938:	bf00      	nop
 800393a:	e7fe      	b.n	800393a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d069      	beq.n	8003a16 <pvPortMalloc+0x146>
 8003942:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <pvPortMalloc+0x17c>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	429a      	cmp	r2, r3
 800394a:	d864      	bhi.n	8003a16 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <pvPortMalloc+0x180>)
 800394e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003950:	4b3f      	ldr	r3, [pc, #252]	; (8003a50 <pvPortMalloc+0x180>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003956:	e004      	b.n	8003962 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	429a      	cmp	r2, r3
 800396a:	d903      	bls.n	8003974 <pvPortMalloc+0xa4>
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1f1      	bne.n	8003958 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003974:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <pvPortMalloc+0x174>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397a:	429a      	cmp	r2, r3
 800397c:	d04b      	beq.n	8003a16 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2208      	movs	r2, #8
 8003984:	4413      	add	r3, r2
 8003986:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	1ad2      	subs	r2, r2, r3
 8003998:	2308      	movs	r3, #8
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	429a      	cmp	r2, r3
 800399e:	d91f      	bls.n	80039e0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	f003 0307 	and.w	r3, r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <pvPortMalloc+0xf8>
	__asm volatile
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
 80039c2:	613b      	str	r3, [r7, #16]
}
 80039c4:	bf00      	nop
 80039c6:	e7fe      	b.n	80039c6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	1ad2      	subs	r2, r2, r3
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80039da:	69b8      	ldr	r0, [r7, #24]
 80039dc:	f000 f8f8 	bl	8003bd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <pvPortMalloc+0x17c>)
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	4a18      	ldr	r2, [pc, #96]	; (8003a4c <pvPortMalloc+0x17c>)
 80039ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80039ee:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <pvPortMalloc+0x17c>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4b18      	ldr	r3, [pc, #96]	; (8003a54 <pvPortMalloc+0x184>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d203      	bcs.n	8003a02 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <pvPortMalloc+0x17c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <pvPortMalloc+0x184>)
 8003a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <pvPortMalloc+0x178>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a16:	f7ff f903 	bl	8002c20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00a      	beq.n	8003a3a <pvPortMalloc+0x16a>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	60fb      	str	r3, [r7, #12]
}
 8003a36:	bf00      	nop
 8003a38:	e7fe      	b.n	8003a38 <pvPortMalloc+0x168>
	return pvReturn;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3728      	adds	r7, #40	; 0x28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20001060 	.word	0x20001060
 8003a48:	2000106c 	.word	0x2000106c
 8003a4c:	20001064 	.word	0x20001064
 8003a50:	20001058 	.word	0x20001058
 8003a54:	20001068 	.word	0x20001068

08003a58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d048      	beq.n	8003afc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	425b      	negs	r3, r3
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4413      	add	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <vPortFree+0xac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <vPortFree+0x44>
	__asm volatile
 8003a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8a:	f383 8811 	msr	BASEPRI, r3
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f3bf 8f4f 	dsb	sy
 8003a96:	60fb      	str	r3, [r7, #12]
}
 8003a98:	bf00      	nop
 8003a9a:	e7fe      	b.n	8003a9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <vPortFree+0x62>
	__asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	60bb      	str	r3, [r7, #8]
}
 8003ab6:	bf00      	nop
 8003ab8:	e7fe      	b.n	8003ab8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <vPortFree+0xac>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d019      	beq.n	8003afc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d115      	bne.n	8003afc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <vPortFree+0xac>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	401a      	ands	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ae0:	f7ff f890 	bl	8002c04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <vPortFree+0xb0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4413      	add	r3, r2
 8003aee:	4a06      	ldr	r2, [pc, #24]	; (8003b08 <vPortFree+0xb0>)
 8003af0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003af2:	6938      	ldr	r0, [r7, #16]
 8003af4:	f000 f86c 	bl	8003bd0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003af8:	f7ff f892 	bl	8002c20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003afc:	bf00      	nop
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	2000106c 	.word	0x2000106c
 8003b08:	20001064 	.word	0x20001064

08003b0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <prvHeapInit+0xac>)
 8003b1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00c      	beq.n	8003b40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	3307      	adds	r3, #7
 8003b2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0307 	bic.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <prvHeapInit+0xac>)
 8003b3c:	4413      	add	r3, r2
 8003b3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b44:	4a1d      	ldr	r2, [pc, #116]	; (8003bbc <prvHeapInit+0xb0>)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <prvHeapInit+0xb0>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	4413      	add	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003b58:	2208      	movs	r2, #8
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0307 	bic.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <prvHeapInit+0xb4>)
 8003b6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b6e:	4b14      	ldr	r3, [pc, #80]	; (8003bc0 <prvHeapInit+0xb4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <prvHeapInit+0xb4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	1ad2      	subs	r2, r2, r3
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <prvHeapInit+0xb4>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <prvHeapInit+0xb8>)
 8003b9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <prvHeapInit+0xbc>)
 8003ba2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003ba4:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <prvHeapInit+0xc0>)
 8003ba6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003baa:	601a      	str	r2, [r3, #0]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000458 	.word	0x20000458
 8003bbc:	20001058 	.word	0x20001058
 8003bc0:	20001060 	.word	0x20001060
 8003bc4:	20001068 	.word	0x20001068
 8003bc8:	20001064 	.word	0x20001064
 8003bcc:	2000106c 	.word	0x2000106c

08003bd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <prvInsertBlockIntoFreeList+0xa8>)
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e002      	b.n	8003be4 <prvInsertBlockIntoFreeList+0x14>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d8f7      	bhi.n	8003bde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d108      	bne.n	8003c12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	441a      	add	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d118      	bne.n	8003c58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <prvInsertBlockIntoFreeList+0xac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d00d      	beq.n	8003c4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	441a      	add	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e008      	b.n	8003c60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003c4e:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <prvInsertBlockIntoFreeList+0xac>)
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e003      	b.n	8003c60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d002      	beq.n	8003c6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c6e:	bf00      	nop
 8003c70:	3714      	adds	r7, #20
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr
 8003c78:	20001058 	.word	0x20001058
 8003c7c:	20001060 	.word	0x20001060

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	2600      	movs	r6, #0
 8003c84:	4d0c      	ldr	r5, [pc, #48]	; (8003cb8 <__libc_init_array+0x38>)
 8003c86:	4c0d      	ldr	r4, [pc, #52]	; (8003cbc <__libc_init_array+0x3c>)
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	42a6      	cmp	r6, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	f000 f830 	bl	8003cf4 <_init>
 8003c94:	2600      	movs	r6, #0
 8003c96:	4d0a      	ldr	r5, [pc, #40]	; (8003cc0 <__libc_init_array+0x40>)
 8003c98:	4c0a      	ldr	r4, [pc, #40]	; (8003cc4 <__libc_init_array+0x44>)
 8003c9a:	1b64      	subs	r4, r4, r5
 8003c9c:	10a4      	asrs	r4, r4, #2
 8003c9e:	42a6      	cmp	r6, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca8:	4798      	blx	r3
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb2:	4798      	blx	r3
 8003cb4:	3601      	adds	r6, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	08003dd0 	.word	0x08003dd0
 8003cbc:	08003dd0 	.word	0x08003dd0
 8003cc0:	08003dd0 	.word	0x08003dd0
 8003cc4:	08003dd4 	.word	0x08003dd4

08003cc8 <memcpy>:
 8003cc8:	440a      	add	r2, r1
 8003cca:	4291      	cmp	r1, r2
 8003ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cd0:	d100      	bne.n	8003cd4 <memcpy+0xc>
 8003cd2:	4770      	bx	lr
 8003cd4:	b510      	push	{r4, lr}
 8003cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cda:	4291      	cmp	r1, r2
 8003cdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ce0:	d1f9      	bne.n	8003cd6 <memcpy+0xe>
 8003ce2:	bd10      	pop	{r4, pc}

08003ce4 <memset>:
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4402      	add	r2, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
